<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kryptonite Lab on Kryptonite Lab</title>
    <link>https://szthanatos.github.io/</link>
    <description>Recent content in Kryptonite Lab on Kryptonite Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo&#43;Academic实现Github Page个人博客</title>
      <link>https://szthanatos.github.io/post/academic_hugo/</link>
      <pubDate>Sun, 09 Dec 2018 16:34:42 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/academic_hugo/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#hugo-安装更新&#34;&gt;Hugo 安装/更新&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装更新&#34;&gt;安装/更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#常用命令&#34;&gt;常用命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#academic-安装更新&#34;&gt;Academic 安装/更新&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#通过netlify&#34;&gt;通过Netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#通过git&#34;&gt;通过Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#更新&#34;&gt;更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#部署到github-pages&#34;&gt;部署到Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#配置修改&#34;&gt;配置修改&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hugo-安装-更新&#34;&gt;Hugo 安装/更新&lt;/h2&gt;

&lt;p&gt;Hugo是使用&lt;code&gt;Go&lt;/code&gt;语言开发的静态站点生成器。无需&lt;code&gt;Go&lt;/code&gt;语言环境，可以直接通过二进制编译包进行跨平台部署。&lt;/p&gt;

&lt;p&gt;以下均以Ubuntu18.0为例。&lt;/p&gt;

&lt;h3 id=&#34;安装-更新&#34;&gt;安装/更新&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;前往&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34; target=&#34;_blank&#34;&gt;Github页面&lt;/a&gt;下载最新版本，这里我们下载&lt;code&gt;hugo_0.52_Linux-64bit.deb&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;使用命令&lt;code&gt;dpkg -i hugo_0.52_Linux-64bit.deb&lt;/code&gt; 安装hugo;&lt;/li&gt;
&lt;li&gt;更新即重复上面两步，覆盖安装即可;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;hugo server&lt;/code&gt;&lt;/strong&gt;： 启动你的网站服务，可以通过浏览器访问&lt;code&gt;http://127.0.0.1:1313/&lt;/code&gt;访问站点;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;hugo new {folder}/{name}.md&lt;/code&gt;&lt;/strong&gt;: 创建新文章，一般默认放在&lt;code&gt;post&lt;/code&gt;文件夹下；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本没了，一般情况下用这两个命令就够了。&lt;/p&gt;

&lt;h2 id=&#34;academic-安装-更新&#34;&gt;Academic 安装/更新&lt;/h2&gt;

&lt;p&gt;Academic是一个Hugo主题，从名字就可以知道这个主题比较学院派，适合科研/学术人员发布个人信息/介绍科研项目，当然，拿来做个人博客也是没问题的。&lt;/p&gt;

&lt;h3 id=&#34;通过netlify&#34;&gt;通过Netlify&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Academic推荐使用第三方博客管理平台&lt;a href=&#34;https://app.netlify.com/start/deploy?repository=https://github.com/sourcethemes/academic-kickstart&#34; target=&#34;_blank&#34;&gt;Netlify&lt;/a&gt;安装，如果你没有域名或者没想建站，只是想自己使用，那我建议不使用它的服务——请直接跳到下一部分，否则跟随网站引导完成安装;&lt;/li&gt;
&lt;li&gt;通过Netlify安装的Academic使用一句命令即可更新：&lt;code&gt;git submodule update --remote --merge&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;通过git&#34;&gt;通过Git&lt;/h3&gt;

&lt;h4 id=&#34;安装&#34;&gt;安装&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;通过git安装的话，首先建议你在GitHub上fork成你自己的项目，默认的话，通过&lt;code&gt;git clone https://github.com/sourcethemes/academic-kickstart.git My_Website&lt;/code&gt;将代码克隆到本地文件夹&lt;code&gt;My_Website&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;进入文件夹，初始化项目：&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;，完成安装;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;更新&#34;&gt;更新&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd themes/academic&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;origin&lt;/code&gt;仓库重命名为&lt;code&gt;upstream&lt;/code&gt;：&lt;code&gt;git remote rename origin upstream&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;将更新下载到本地：&lt;code&gt;git fetch upstream&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;列出可用更新：&lt;code&gt;git log --pretty=oneline --abbrev-commit --decorate HEAD..upstream/master&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;更新：&lt;code&gt;git pull upstream&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;部署到github-pages&#34;&gt;部署到Github Pages&lt;/h2&gt;

&lt;p&gt;网上介绍的办法很多，但核心其实就一句：&lt;strong&gt;将&lt;code&gt;hugo server&lt;/code&gt;命令生成的&lt;code&gt;public&lt;/code&gt;文件夹上传到GitHub pages项目下&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public&lt;/code&gt;文件夹相当于编译完成的静态网站，你在本地打开其实就能看。换句话说，你每次手动将这个目录下的内容上传到你的GitHub page项目也是可以的。&lt;/p&gt;

&lt;p&gt;然后为了达到这个目的，官网给出的做法是利用&lt;code&gt;git submodule&lt;/code&gt;命令将你的&lt;code&gt;GitHub page&lt;/code&gt;项目作为&lt;code&gt;My_Website&lt;/code&gt;项目的子模块存放到&lt;code&gt;public&lt;/code&gt;目录。那么当你更新你的文章之后，只提交&lt;code&gt;public&lt;/code&gt;文件夹内的变更到&lt;code&gt;GitHub page&lt;/code&gt;项目即可。&lt;/p&gt;

&lt;p&gt;详细官方做法如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在GitHub上创建两个项目，一个是fork 的&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart.git&#34; target=&#34;_blank&#34;&gt;academic-kickstart&lt;/a&gt;，也就是你前面clone到本地的&lt;code&gt;My_Website&lt;/code&gt;，另一个即是以你用户名/组织名开头、以&lt;code&gt;.github.io&lt;/code&gt;结尾的GitHub page项目。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;My_Website&lt;/code&gt;目录下执行&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;初始化子模块；&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;config.toml&lt;/code&gt;中的&lt;code&gt;baseurl&lt;/code&gt;设置为你的GitHub page地址；&lt;/li&gt;
&lt;li&gt;删除&lt;code&gt;public&lt;/code&gt;文件夹(如果有的话)，将GitHub page项目clone进去：&lt;code&gt;git submodule add -f -b master https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更新&lt;code&gt;academic-kickstart&lt;/code&gt;项目：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;Initial commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更新GitHub page项目：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo  # 更新public静态文件
cd public
git add .
git commit -m &amp;quot;Build website&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;实际上只有第六步是更新GitHub page，每次重复执行这一部分就行(如果你不把文章保存到&lt;code&gt;academic-kickstart&lt;/code&gt;的话)。&lt;/p&gt;

&lt;h2 id=&#34;配置修改&#34;&gt;配置修改&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>hbase表设计风格指南</title>
      <link>https://szthanatos.github.io/post/hbase_design/</link>
      <pubDate>Sun, 09 Dec 2018 16:19:27 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/hbase_design/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#简介&#34;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#一般原则&#34;&gt;一般原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#命名空间namespace&#34;&gt;命名空间(NameSpace)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#表table&#34;&gt;表(Table)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-1&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-1&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#行键rowkey&#34;&gt;行键(Rowkey)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-2&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-2&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#注意&#34;&gt;注意&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#慎重将时间戳直接放入行键中&#34;&gt;慎重将时间戳直接放入行键中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#权衡hash和string的效果&#34;&gt;权衡hash和string的效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列族columnfamily&#34;&gt;列族(ColumnFamily)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-3&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-3&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#注意-1&#34;&gt;注意&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列族的数量应控制在1-3个&#34;&gt;列族的数量应控制在1-3个&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列qualifier&#34;&gt;列(Qualifier)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-4&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-4&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;本指南是对在HBase进行字段设计而提供的指导性准则和建议。总体标准、设计方式参照&lt;a href=&#34;https://github.com/google/styleguide&#34; target=&#34;_blank&#34;&gt;Google 开源项目风格指南&lt;/a&gt;以及现有项目经验。所有条目均为个人总结，&lt;strong&gt;并不是一份官方标准性质的指南&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;HBase是建立在Hadoop文件系统（HDFS）之上的分布式、面向列的数据库。&lt;/p&gt;

&lt;h2 id=&#34;一般原则&#34;&gt;一般原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;无论是表或者是列或者其他，都应该使用名词或者动宾短语以代表一类对象;&lt;/li&gt;
&lt;li&gt;尽量避免使用(尤其是单独使用)例如&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;join&lt;/code&gt;、&lt;code&gt;select&lt;/code&gt;等常见保留词;&lt;/li&gt;
&lt;li&gt;HBase在性能和效率上更擅长处理“高而瘦”的表，而非“矮而胖”的表——以Excel类比，HBase应该尽可能设计成只有很少的列(瘦)而有非常多行(高)的模式;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;命名空间-namespace&#34;&gt;命名空间(NameSpace)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字的组合形式，其中，单词必须大写，并且首字符必须为英文字符，不能是数字;&lt;/li&gt;
&lt;li&gt;不建议用连接符（下划线）拼接多个单词，简单语义的可采用单个单词，复杂语义的可采用多个单词的首字母拼接;&lt;/li&gt;
&lt;li&gt;长度尽量限制在4~8字符之间;&lt;/li&gt;
&lt;li&gt;命名空间一般可与项目名称、组织机构名称等保持一致;&lt;/li&gt;
&lt;li&gt;一般情况下如果不指定命名空间，表会被放在默认(default)命名空间下;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ZKR
XJ917 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;表-table&#34;&gt;表(Table)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-1&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字、连接符（_）的组合形式，其中，单词必须大写，并且首字符必须为英文字符，可用连接符拼接多个单词;&lt;/li&gt;
&lt;li&gt;长度尽量限制在8~16字符之间;&lt;/li&gt;
&lt;li&gt;尽量采用具有明确意义的英文单词，而不建议采用汉字的拼音字母或者拼音首字母组合;&lt;/li&gt;
&lt;li&gt;无需以&lt;code&gt;TABLE&lt;/code&gt;结尾;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-1&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;USER_INFO
WEIBO_USER_FANS
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;行键-rowkey&#34;&gt;行键(Rowkey)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-2&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字、非转义字符组合形式，不要求大小写，但首字符必须是英文字符或数字;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-2&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;123456-654321
dftf3a3l3rv3qr
s.taobo.com/faefavc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;

&lt;h4 id=&#34;慎重将时间戳直接放入行键中&#34;&gt;慎重将时间戳直接放入行键中&lt;/h4&gt;

&lt;p&gt;对于同一条数据，HBase本身提供时间戳(TimeStamp)以在同一个RowKey下保存不同版本数据;
对于整体，存放旧数据的区域随着时间戳增大可能不再写入，而存放新数据的区域始终保持高负荷，这样降低了HBase整体的读写能力。&lt;/p&gt;

&lt;p&gt;一个推荐的方式是使用反向时间戳。&lt;/p&gt;

&lt;h4 id=&#34;权衡hash和string的效果&#34;&gt;权衡hash和string的效果&lt;/h4&gt;

&lt;p&gt;哈希化(一般特指单项哈希)的Rowkey能很好的避免热点问题，但是也会同时丢失直接使用String的RowKey的天然聚类和排序的能力。&lt;/p&gt;

&lt;h2 id=&#34;列族-columnfamily&#34;&gt;列族(ColumnFamily)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-3&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字的组合形式，其中，单词必须大写，并且首字符必须为英文字符，不能是数字;&lt;/li&gt;
&lt;li&gt;长度尽量限制在1~6字符之间，过长的列族名称将占用更多的存储空间,它们不应该像在典型的 RDBMS 中一样具有自我记录和描述性;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-3&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA
D1 # data1
WA # web args
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;注意-1&#34;&gt;注意&lt;/h3&gt;

&lt;h4 id=&#34;列族的数量应控制在1-3个&#34;&gt;列族的数量应控制在1-3个&lt;/h4&gt;

&lt;p&gt;HBase 表不应该被设计成模拟RDBMS表，列族的数量在满足需求的情况下应该尽可能少。在存储时，一个列族会存储成一个StoreFile，多个列族对应的多个文件在分裂时会对服务器造成更大的压力。&lt;/p&gt;

&lt;h2 id=&#34;列-qualifier&#34;&gt;列(Qualifier)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-4&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字、连接符（_）的组合形式，其中，单词必须&lt;strong&gt;小写&lt;/strong&gt;，并且首字符必须为英文字符，不能是数字，可用连接符拼接多个单词;&lt;/li&gt;
&lt;li&gt;所有列名都应该是名词或者以&lt;code&gt;is&lt;/code&gt;开头的动宾短语(表示判断)，不应该使用其他词性单词;&lt;/li&gt;
&lt;li&gt;允许使用前缀，不允许使用后缀;&lt;/li&gt;
&lt;li&gt;长度尽量限制在1~16字符之间;&lt;/li&gt;
&lt;li&gt;尽量采用具有明确意义的英文单词，而不建议采用汉字的拼音字母或者拼音首字母组合;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-4&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user_name
is_str
sound_type
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>手把手教你用Kafka</title>
      <link>https://szthanatos.github.io/topic/kafka_intro/</link>
      <pubDate>Sun, 09 Dec 2018 15:55:32 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/topic/kafka_intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker从入门到哪都不去</title>
      <link>https://szthanatos.github.io/topic/docker_intro/</link>
      <pubDate>Sun, 09 Dec 2018 15:55:24 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/topic/docker_intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kafka -02- 滚动升级</title>
      <link>https://szthanatos.github.io/post/kafka/update/</link>
      <pubDate>Sun, 09 Dec 2018 15:19:52 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/kafka/update/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#环境说明&#34;&gt;环境说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#可能存在的风险&#34;&gt;可能存在的风险&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#轻微警报&#34;&gt;轻微警报&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#严重警报&#34;&gt;严重警报&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#升级步骤滚动升级&#34;&gt;升级步骤（滚动升级）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#替代方案离线升级&#34;&gt;替代方案（离线升级）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kafka20官方升级指南&#34;&gt;Kafka2.0官方升级指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;环境说明&#34;&gt;环境说明&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;版本号&lt;/th&gt;
&lt;th&gt;发布日期&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;当前版本&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.11.0.1&lt;/td&gt;
&lt;td&gt;2017-09-14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;最新版本&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2018-07-30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;配置文件路径：&lt;/strong&gt;
&amp;gt; /home/tools/kafka_2.12-0.11.0.1/config/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目标需求：&lt;/strong&gt; 在Kafka集群不停机不停止服务的情况下进行升级改造。&lt;/p&gt;

&lt;h2 id=&#34;可能存在的风险&#34;&gt;可能存在的风险&lt;/h2&gt;

&lt;h3 id=&#34;轻微警报&#34;&gt;轻微警报&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;consumer可能出现偏移量提交失败而造成重复消费&lt;/li&gt;
&lt;li&gt;broker提示&amp;rsquo;NotLeaderForPartitionException&amp;rsquo;异常&lt;/li&gt;
&lt;li&gt;由于节点下线，可能造成临时性能问题
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;严重警报&#34;&gt;严重警报&lt;/h3&gt;

&lt;p&gt;严格按照步骤升级，暂未捕捉到严重问题相关信息&lt;/p&gt;

&lt;h2 id=&#34;升级步骤-滚动升级&#34;&gt;升级步骤（滚动升级）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;限定通讯协议版本：&lt;/p&gt;

&lt;p&gt;配置broker上的server.properties文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;inter.broker.protocol.version = 0.11.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;依次更新代码并重启borker：&lt;/p&gt;

&lt;p&gt;一次关闭一个broker，更新源码，重启&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更新通讯协议版本：&lt;/p&gt;

&lt;p&gt;完成所有broker节点的源码更新后,升级协议（方法同上）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;inter.broker.protocol.version = 2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再次依次重启broker：&lt;/p&gt;

&lt;p&gt;同上，一次重启一个&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;ps：&lt;/em&gt;&lt;/strong&gt; 如果修改过消息格式版本(log.message.format.version)，则需要在上面步骤中，同步配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;log.message.format.version=当前版本/要升级的版本
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;替代方案-离线升级&#34;&gt;替代方案（离线升级）&lt;/h2&gt;

&lt;p&gt;关闭所有broker，更新代码并重新启动。默认情况下，自动以新协议开始。&lt;/p&gt;

&lt;h2 id=&#34;kafka2-0官方升级指南&#34;&gt;Kafka2.0官方升级指南&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#upgrade&#34; target=&#34;_blank&#34;&gt;upgrade&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka -01- 安装配置</title>
      <link>https://szthanatos.github.io/post/kafka/install/</link>
      <pubDate>Thu, 06 Dec 2018 10:09:46 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/kafka/install/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#环境说明&#34;&gt;环境说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装步骤&#34;&gt;安装步骤&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#0-环境准备&#34;&gt;0. 环境准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-下载安装&#34;&gt;1. 下载安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-配置集群参数&#34;&gt;2. 配置集群参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-配置日志参数&#34;&gt;3. 配置日志参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-配置jvm参数&#34;&gt;4. 配置JVM参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-配置linux参数&#34;&gt;5. 配置Linux参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kafka20官方安装指南&#34;&gt;Kafka2.0官方安装指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;环境说明&#34;&gt;环境说明&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;当前版本&lt;/th&gt;
&lt;th&gt;发布日期&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2018-07-30&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi?path=/kafka/2.0.0/kafka_2.11-2.0.0.tgz&#34; target=&#34;_blank&#34;&gt;官方2.0.0镜像&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;安装步骤&#34;&gt;安装步骤&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意：&lt;/strong&gt; 文中以 &lt;code&gt;{}&lt;/code&gt; 包裹起来的内容需要自己替换，并非直接使用&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-环境准备&#34;&gt;0. 环境准备&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基础环境&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Java版本应该在8(jdk1.8)或以上，以更好的支持G1回收&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;硬件参数&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CPU: 英特尔至强E5-2650 v4 * 2 (共计24核)&lt;br&gt;Mem: DDR4内存-32GB * 8&lt;br&gt;Sto: 2000GB * 8 raid 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;文件路径&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;/home/tools/kafka_2.11-2.0.0/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数据存放位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;/home/sdb/kafka-logs,/home/sdc/kafka-logs,&lt;br&gt;/home/sdd/kafka-logs,/home/sde/kafka-logs,&lt;br&gt;/home/sdf/kafka-logs,/home/sdg/kafka-logs,&lt;br&gt;/home/sdh/kafka-logs,/home/sdi/kafka-logs&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;zookeeper集群位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10.10.20.83:2181,10.10.20.84:2181,10.10.20.85:2181&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;1-下载安装&#34;&gt;1. 下载安装&lt;/h3&gt;

&lt;p&gt;下载最新版本Kafka，解压到指定目录，无需其他操作即完成安装。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf kafka_2.11-2.0.0.tgz -C /home/tools
cd kafka_2.11-2.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-配置集群参数&#34;&gt;2. 配置集群参数&lt;/h3&gt;

&lt;p&gt;修改&lt;code&gt;config/server.properties&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;基本参数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# broker唯一id，值为不重复正整数
broker.id={n: int}

# 服务监听地址
listeners=PLAINTEXT://{your.host}:9092

# 日志存放位置列表，以逗号隔开
log.dirs={data.storage.list}

# zookeeper地址列表，以逗号隔开
zookeeper.connect={zookeeper.server.list} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;优化参数配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 消息处理线程数，建议数量为cpu核数加1
num.network.threads=25

# 磁盘IO的线程数,建议为cpu核数2倍，最大不超过3倍
num.io.threads=48

# 拉取线程数，影响follower的I/O并发度，单位时间内leader持有更多请求，相应负载会增大
num.replica.fetchers=2

# 分区数量配置，根据业务情况修改
num.partitions=16

# 消息日志备份数，默认是1
default.replication.factor=2

# 刷盘(写入文件到磁盘)间隔消息数，建议设为10000
log.flush.interval.messages=10000

# 刷盘间隔毫秒数，建议1秒(1000)
log.flush.interval.ms=1000

# 日志保留小时数
log.retention.hours=48

# 段文件大小，过小会产生很多小文件降低性能，过大会影响快速回收磁盘空间以及Kafka重启后的载入速度
og.segment.bytes=1073741824

# 最大字节数，默认1M，可以调到5M以上
replica.fetch.max.bytes=5242880

# 可接受数据大小，受限于java int类型的取值范围,超出后会报OOM异常
socket.request.max.bytes=2147483600

# 日志传输时候的压缩格式，可选择lz4, snappy, gzip,不压缩。建议打开压缩，可以提高传输性能
compression.type=snappy

# 是否允许通过管理工具删除topic，默认是false
delete.topic.enable=true

# 是否允许程序自动创建Topic
auto.create.topics.enable=false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-配置日志参数&#34;&gt;3. 配置日志参数&lt;/h3&gt;

&lt;p&gt;修改&lt;code&gt;config/log4j.properties&lt;/code&gt;的jog4j参数，提高Kafka操作日志（和数据日志区分）的日志级别，以降低日志输出相关资源占用。具体可更改配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Kafka2.0默认只有controller是TRACE级别，可以改为INFO，其他INFO级别可以适当提升为WARN

# zookeeper日志级别，
log4j.logger.org.I0Itec.zkclient.ZkClient=INFO
log4j.logger.org.apache.zookeeper=INFO

# 主日志级别
log4j.logger.kafka=INFO
log4j.logger.org.apache.kafka=INFO

# request日志级别，只有当需要调试时才有必要输出
log4j.logger.kafka.request.logger=WARN, requestAppender
log4j.additivity.kafka.request.logger=false

# 需要调试时解除以下三行注释，并将RequestChannel$设为TRACE
# log4j.logger.kafka.network.Processor=TRACE, requestAppender
# log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender
# log4j.additivity.kafka.server.KafkaApis=false
log4j.logger.kafka.network.RequestChannel$=WARN, requestAppender
log4j.additivity.kafka.network.RequestChannel$=false

# controller日志级别，默认为TRACE
log4j.logger.kafka.controller=INFO, controllerAppender
log4j.additivity.kafka.controller=false

# 日志清理的日志级别
log4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender
log4j.additivity.kafka.log.LogCleaner=false

log4j.logger.state.change.logger=TRACE, stateChangeAppender
log4j.additivity.state.change.logger=false

# 登陆认证的日志级别
log4j.logger.kafka.authorizer.logger=INFO, authorizerAppender
log4j.additivity.kafka.authorizer.logger=false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-配置jvm参数&#34;&gt;4. 配置JVM参数&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning&lt;/strong&gt;：谨慎调试&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;bin/kafka-server-start.sh&lt;/code&gt;文件中调整参数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 在base_dir之后配置参数
base_dir=$(dirname $0)

export KAFKA_HEAP_OPTS=&amp;quot;-Xms6g -Xmx6g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;ps：&lt;/strong&gt; 虽然看起来很激进，但是以上配置参照的是LinkIn高峰时期最繁忙的集群:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;60 brokers
50k partitions (replication factor 2)
800k messages/sec in
300 MB/sec inbound, 1 GB/sec+ outbound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;这个配置的集群实现了90%的GC中断时间不超过21毫秒，每秒钟新生代GC次数不超过一次&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;ps2：&lt;/strong&gt; 上述环境的Java版本为JDK 1.8 u5&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-配置linux参数&#34;&gt;5. 配置Linux参数&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning&lt;/strong&gt;：谨慎调试&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 调整系统所有进程一共可以打开的最大文件数：
echo &#39;fs.file-max = 1024000&#39; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以及&lt;code&gt;/etc/security/limits.conf&lt;/code&gt;末尾增加：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 设置当前user以及由它启动的进程的资源限制
{user}      soft    nofile      1024000
{user}      hard    nofile      1024000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增大socket buffer size，以提高吞吐性能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo 212992 &amp;gt;&amp;gt; /proc/sys/net/core/wmem_max
echo 212992 &amp;gt;&amp;gt; /proc/sys/net/core/rmem_max    
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kafka2-0官方安装指南&#34;&gt;Kafka2.0官方安装指南&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#quickstart&#34; target=&#34;_blank&#34;&gt;Quick Start&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker -02- 进阶生态</title>
      <link>https://szthanatos.github.io/post/docker/ecology/</link>
      <pubDate>Thu, 06 Dec 2018 10:06:06 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/docker/ecology/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker -01- 基本概念</title>
      <link>https://szthanatos.github.io/post/docker/basis/</link>
      <pubDate>Wed, 05 Dec 2018 22:17:22 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/docker/basis/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker简介&#34;&gt;Docker简介&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#什么是docker&#34;&gt;什么是Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker特点&#34;&gt;Docker特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#为什么要使用docker&#34;&gt;为什么要使用Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#基本概念&#34;&gt;基本概念&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#镜像&#34;&gt;镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#容器&#34;&gt;容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#仓库&#34;&gt;仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#生命周期&#34;&gt;生命周期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装配置&#34;&gt;安装配置&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#准备工作&#34;&gt;准备工作&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#系统要求&#34;&gt;系统要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#卸载旧版本&#34;&gt;卸载旧版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用脚本安装非生产环境&#34;&gt;使用脚本安装（非生产环境）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用-yum-安装&#34;&gt;使用 yum 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#离线安装&#34;&gt;离线安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#启动-docker-ce&#34;&gt;启动 Docker CE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#建立-docker-用户组&#34;&gt;建立 Docker 用户组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#测试-docker-是否安装正确&#34;&gt;测试 Docker 是否安装正确&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#镜像加速&#34;&gt;镜像加速&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#常用docker操作&#34;&gt;常用Docker操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用镜像&#34;&gt;使用镜像&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#基本操作&#34;&gt;基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#容器操作&#34;&gt;容器操作&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#容器启停&#34;&gt;容器启停&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#数据管理&#34;&gt;数据管理&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#方式1数据卷推荐&#34;&gt;方式1：数据卷（推荐）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#方式2绑定主机目录&#34;&gt;方式2：绑定主机目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#区别&#34;&gt;区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用网络&#34;&gt;使用网络&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#端口映射&#34;&gt;端口映射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#容器互联&#34;&gt;容器互联&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#延申&#34;&gt;延申&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#容器编排&#34;&gt;容器编排&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nvidia-docker&#34;&gt;Nvidia Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker简介&#34;&gt;Docker简介&lt;/h2&gt;

&lt;h3 id=&#34;什么是docker&#34;&gt;什么是Docker&lt;/h3&gt;

&lt;p&gt;Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，并于2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 &lt;a href=&#34;https://github.com/moby/moby&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; 上进行维护，后来还加入了 Linux 基金会，并成立推动 &lt;a href=&#34;https://www.opencontainers.org/&#34; target=&#34;_blank&#34;&gt;开放容器联盟（OCI）&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Docker 最初是在 Ubuntu 12.04 上以&lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;Go 语言&lt;/a&gt; 进行开发实现的, Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持(换句话说不支持CentOS6.5以下)。&lt;/p&gt;

&lt;p&gt;Docker 是一种 &lt;strong&gt;容器化技术&lt;/strong&gt; ，类似虚拟机的概念，但不同的是传统虚拟机是在虚拟硬件的基础上，完整模拟一整个操作系统，而Docker是以单个应用（容器）为单位进行虚拟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://szthanatos.github.io/img/virtualization.png&#34; alt=&#34;传统虚拟化&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://szthanatos.github.io/img/docker.png&#34; alt=&#34;Docker&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;docker特点&#34;&gt;Docker特点&lt;/h3&gt;

&lt;p&gt;Docker具有以下特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件系统隔离&lt;/strong&gt; ：每个进程容器运行在完全独立的根文件系统里。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源隔离&lt;/strong&gt; ：可以使用cgroup为每个进程容器分配不同的系统资源，例如CPU和内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络隔离&lt;/strong&gt; ：每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写时复制&lt;/strong&gt; ：采用写时复制方式创建根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志记录&lt;/strong&gt; ：Docker将会收集和记录每个进程容器的标准流（stdout/stderr/stdin），用于实时检索或批量检索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变更管理&lt;/strong&gt; ：容器文件系统的变更可以提交到新的映像中，并可重复使用以创建更多的容器。无需使用模板或手动配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互式Shell&lt;/strong&gt; ：Docker可以分配一个虚拟终端并关联到任何容器的标准输入上，例如运行一个一次性交互shell。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;为什么要使用docker&#34;&gt;为什么要使用Docker&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;特性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;容器&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;启动&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;秒级&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;硬盘使用&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;MB&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般为 &lt;code&gt;GB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;性能&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;接近原生&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弱于原生&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;系统支持量&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更高效的利用系统资源&lt;/strong&gt; ：由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更快速的启动时间&lt;/strong&gt; ：Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致的运行环境&lt;/strong&gt; ： Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 &lt;em&gt;「这段代码在我机器上没问题啊」&lt;/em&gt; 这类问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续交付和部署&lt;/strong&gt; ：对&lt;code&gt;DevOps&lt;/code&gt;人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 &lt;a href=&#34;###Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; 来进行镜像构建，并结合 &lt;code&gt;持续集成(Continuous Integration)&lt;/code&gt; 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 &lt;code&gt;持续部署(Continuous Delivery/Deployment)&lt;/code&gt;系统进行自动部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更轻松的迁移&lt;/strong&gt; ：由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;p&gt;Docker 包括三个基本概念
- 镜像（&lt;code&gt;Image&lt;/code&gt;）
- 容器（&lt;code&gt;Container&lt;/code&gt;）
- 仓库（&lt;code&gt;Repository&lt;/code&gt;）&lt;/p&gt;

&lt;p&gt;理解了这三个概念，就理解了 Docker 的整个生命周期。&lt;/p&gt;

&lt;h3 id=&#34;镜像&#34;&gt;镜像&lt;/h3&gt;

&lt;p&gt;操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 &lt;code&gt;root&lt;/code&gt; 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 &lt;code&gt;root&lt;/code&gt; 文件系统。比如官方镜像 &lt;code&gt;ubuntu:16.04&lt;/code&gt; 就包含了完整的一套 Ubuntu 16.04 最小系统的 &lt;code&gt;root&lt;/code&gt; 文件系统。&lt;/p&gt;

&lt;p&gt;Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 &lt;strong&gt;镜像不包含任何动态数据，其内容在构建之后也不会被改变。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。&lt;/strong&gt; 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。&lt;/p&gt;

&lt;p&gt;分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;

&lt;h3 id=&#34;容器&#34;&gt;容器&lt;/h3&gt;

&lt;p&gt;镜像（&lt;code&gt;Image&lt;/code&gt;）和容器（&lt;code&gt;Container&lt;/code&gt;）的关系，就像是面向对象程序设计中的 &lt;code&gt;类&lt;/code&gt; 和 &lt;code&gt;实例&lt;/code&gt; 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容器的实质是进程&lt;/strong&gt; ，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 &lt;code&gt;命名空间&lt;/code&gt;。因此容器可以拥有自己的 &lt;code&gt;root&lt;/code&gt; 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。&lt;/p&gt;

&lt;p&gt;前面讲过镜像使用的是分层存储，容器也是如此。 &lt;strong&gt;每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，&lt;/strong&gt; 我们可以称这个为容器运行时读写而准备的存储层为 &lt;strong&gt;容器存储层&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此， &lt;strong&gt;任何保存于容器存储层的信息都会随容器删除而丢失&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。 &lt;strong&gt;所有的文件写入操作，都应该使用 &lt;a href=&#34;####方式1：数据卷（推荐）&#34;&gt;数据卷（Volume）&lt;/a&gt;、或者&lt;a href=&#34;####方式2：挂载主机目录&#34;&gt;绑定宿主目录&lt;/a&gt;&lt;/strong&gt; ，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。&lt;/p&gt;

&lt;p&gt;数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。&lt;/p&gt;

&lt;h3 id=&#34;仓库&#34;&gt;仓库&lt;/h3&gt;

&lt;p&gt;如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker提供注册服务器(&lt;code&gt;Docker Registry&lt;/code&gt;)来实现这样的服务。&lt;/p&gt;

&lt;p&gt;一个&lt;code&gt;Docker Registry&lt;/code&gt;中可以包含多个 &lt;strong&gt;仓库&lt;/strong&gt; （&lt;code&gt;Repository&lt;/code&gt;）；每个仓库可以包含多个 &lt;strong&gt;标签&lt;/strong&gt; （&lt;code&gt;Tag&lt;/code&gt;）；每个标签对应一个镜像。&lt;/p&gt;

&lt;p&gt;通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;code&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/code&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 &lt;code&gt;latest&lt;/code&gt; 作为默认标签。&lt;/p&gt;

&lt;p&gt;以 &lt;a href=&#34;https://store.docker.com/images/ubuntu&#34; target=&#34;_blank&#34;&gt;Ubuntu 镜像&lt;/a&gt; 为例，&lt;code&gt;ubuntu&lt;/code&gt; 是仓库的名字，其内包含有不同的版本标签，如，&lt;code&gt;14.04&lt;/code&gt;, &lt;code&gt;16.04&lt;/code&gt;。我们可以通过 &lt;code&gt;ubuntu:14.04&lt;/code&gt;，或者 &lt;code&gt;ubuntu:16.04&lt;/code&gt; 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 &lt;code&gt;ubuntu&lt;/code&gt;，那将视为 &lt;code&gt;ubuntu:latest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;仓库名经常以 &lt;em&gt;两段式路径&lt;/em&gt; 形式出现，比如 &lt;code&gt;jwilder/nginx-proxy&lt;/code&gt;，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。&lt;/p&gt;

&lt;p&gt;类似git 和GitHub，官方提供&lt;a href=&#34;https://hub.docker.com/&#34; target=&#34;_blank&#34;&gt;Docker Hub&lt;/a&gt;，作为默认的 Registry。用户也可以在本地搭建私有 Docker Registry。Docker 官方提供了 &lt;a href=&#34;https://store.docker.com/images/registry/&#34; target=&#34;_blank&#34;&gt;Docker Registry&lt;/a&gt; 镜像，可以直接使用做为私有 Registry 服务。&lt;/p&gt;

&lt;h3 id=&#34;生命周期&#34;&gt;生命周期&lt;/h3&gt;

&lt;p&gt;结合上面的概念，这里有一张图比较好的概括了整个Docker工作的生命周期（以及主要命令）。
&lt;img src=&#34;https://szthanatos.github.io/img/period.png&#34; alt=&#34;生命周期&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装配置&#34;&gt;安装配置&lt;/h2&gt;

&lt;p&gt;这里仅以CentOS 安装 Docker CE 举例说明。详见&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/docker-ce/centos/&#34; target=&#34;_blank&#34;&gt;Docker 官方 CentOS 安装文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;

&lt;h4 id=&#34;系统要求&#34;&gt;系统要求&lt;/h4&gt;

&lt;p&gt;Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 &lt;code&gt;overlay2&lt;/code&gt; 存储层驱动）无法使用，并且部分功能可能不太稳定。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;警告：切勿在没有配置 Docker YUM 源的情况下直接使用 yum 命令安装 Docker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;卸载旧版本&#34;&gt;卸载旧版本&lt;/h4&gt;

&lt;p&gt;旧版本的 Docker 称为 &lt;code&gt;docker&lt;/code&gt; 或者 &lt;code&gt;docker-engine&lt;/code&gt;，使用以下命令卸载旧版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum remove docker \
                docker-client \
                docker-client-latest \
                docker-common \
                docker-latest \
                docker-latest-logrotate \
                docker-logrotate \
                docker-selinux \
                docker-engine-selinux \
                docker-engine
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用脚本安装-非生产环境&#34;&gt;使用脚本安装（非生产环境）&lt;/h3&gt;

&lt;p&gt;对于个人测试，可以使用这个脚本自动化安装Docker：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，需要注意， &lt;strong&gt;这个脚本可能扰乱你的系统配置、安装及大量的（你可能用不到的）依赖，并且只能安装最新（可能未经充分测试的）版本的Docker&lt;/strong&gt; ， 所以不推荐在生产环境中使用。&lt;/p&gt;

&lt;h3 id=&#34;使用-yum-安装&#34;&gt;使用 yum 安装&lt;/h3&gt;

&lt;p&gt;安装依赖包：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install -y yum-utils \
                    device-mapper-persistent-data \
                    lvm2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加 &lt;code&gt;yum&lt;/code&gt; 软件源：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 中国科学技术大学开源软件镜像源
sudo yum-config-manager \
    --add-repo \
    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo


# 官方源
# sudo yum-config-manager \
#     --add-repo \
#     https://download.docker.com/linux/centos/docker-ce.repo    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更新 &lt;code&gt;yum&lt;/code&gt; 软件源缓存，并安装 &lt;code&gt;docker-ce&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum makecache fast
sudo yum install docker-ce
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;离线安装&#34;&gt;离线安装&lt;/h3&gt;

&lt;p&gt;以docker-ce-18.03.1为例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;a href=&#34;https://download.docker.com/linux/centos/7/x86_64/stable/Packages/这里找到对应rpm包&#34; target=&#34;_blank&#34;&gt;https://download.docker.com/linux/centos/7/x86_64/stable/Packages/这里找到对应rpm包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;执行安装命令：&lt;code&gt;rpm -ivh docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由于安装环境不同，可能会发现缺少一些相关依赖包（eg: libcgroup、libtool-ltdl、container-selinux）前往 &lt;a href=&#34;https://pkgs.org/&#34; target=&#34;_blank&#34;&gt;https://pkgs.org/&lt;/a&gt; 或 &lt;a href=&#34;https://buildlogs.centos.org/&#34; target=&#34;_blank&#34;&gt;https://buildlogs.centos.org/&lt;/a&gt; 下载对应依赖包，依次安装即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;启动-docker-ce&#34;&gt;启动 Docker CE&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable docker
sudo systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;建立-docker-用户组&#34;&gt;建立 Docker 用户组&lt;/h3&gt;

&lt;p&gt;默认情况下，docker命令需要&lt;code&gt;root&lt;/code&gt;权限，为了避免每次输入命令都要加&lt;code&gt;sudo&lt;/code&gt;，可以将用户加入 &lt;code&gt;docker&lt;/code&gt; 用户组：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo groupadd docker
sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;退出当前终端并重新登录，进行如下测试。&lt;/p&gt;

&lt;h3 id=&#34;测试-docker-是否安装正确&#34;&gt;测试 Docker 是否安装正确&lt;/h3&gt;

&lt;p&gt;执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker会从官方仓库下载hello-world镜像并启动，如果一切正常的话会看到类似如下提示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Unable to find image &#39;hello-world:latest&#39; locally
latest: Pulling from library/hello-world
ca4f61b1923c: Pull complete
Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;镜像加速&#34;&gt;镜像加速&lt;/h3&gt;

&lt;p&gt;鉴于国内网络问题，建议使用Docker中国或者其他国内镜像源。&lt;/p&gt;

&lt;p&gt;修改（或新增）&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;文件，添加:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{
  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://registry.docker-cn.com&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后重启Docker使配置生效。&lt;/p&gt;

&lt;h3 id=&#34;常用docker操作&#34;&gt;常用Docker操作&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 查看docker版本
docker version
# 显示docker系统的信息
docker info
# 日志信息
docker logs
# 故障检查
service docker status
# 启动关闭docker
sudo service docker start|stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用镜像&#34;&gt;使用镜像&lt;/h2&gt;

&lt;h3 id=&#34;基本操作&#34;&gt;基本操作&lt;/h3&gt;

&lt;p&gt;以redis为例，我们从&lt;a href=&#34;https://hub.docker.com/explore/&#34; target=&#34;_blank&#34;&gt;Docker Hub&lt;/a&gt;上获取官方镜像到本地：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://szthanatos.github.io/img/hub-redis.jpg&#34; alt=&#34;Docker hub redis&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;ps1：由于redis是官方源（Official），否则应该写完整的两段式仓库名 &lt;code&gt;&amp;lt;用户名&amp;gt;/&amp;lt;软件名&amp;gt;&lt;/code&gt;，例如bitnami/redis。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ps2：此处没有指定镜像版本，默认会拉取redis:lastest镜像，指定版本应该写成例如：redis:5.0-rc5&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;查看已经下载的镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image ls

# 会有类似如下显示
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
redis                latest              5f515359c7f8        5 days ago          183 MB 
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更细节的显示可以使用&lt;code&gt;docker image ls --format &amp;quot;{{.ID}}: {{.Repository}}&amp;quot;&lt;/code&gt;直接列出镜像ID和仓库名,&lt;/p&gt;

&lt;p&gt;或者使用&lt;code&gt;docker image ls --format &amp;quot;table {{.ID}}\t{{.Repository}}\t{{.Tag}}&amp;quot;&lt;/code&gt;
以表格等距显示.&lt;/p&gt;

&lt;p&gt;如果要删除某个镜像的话，可以使用&lt;code&gt;docker image rm {IMAGE ID}|{REPOSITORY}&lt;/code&gt;命令，不要过先确保没有容器在使用这个镜像。&lt;/p&gt;

&lt;h3 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;除了引用制作好的镜像，我们也可以基于现有镜像定制新的镜像。定制所用的脚本文件就是 Dockerfile。&lt;/p&gt;

&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的 &lt;strong&gt;指令(Instruction)&lt;/strong&gt; ，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。&lt;/p&gt;

&lt;p&gt;我们新建一个空白文件，命名为 &lt;code&gt;dockerfile&lt;/code&gt;，再文件中写入如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM redis
RUN mkdir redis
WORKDIR redis
COPY ./redis.conf /etc/
CMD [&amp;quot;redis-server&amp;quot;, &amp;quot;/etc/redis.conf&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们依次解释上面每一行：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FROM&lt;/strong&gt; 就是指定 &lt;strong&gt;基础镜像&lt;/strong&gt; ,一个 &lt;code&gt;Dockerfile&lt;/code&gt; 中 &lt;code&gt;FROM&lt;/code&gt; 是必备的指令，并且必须是第一条指令。如果不以任何镜像为基础，那应该用&lt;code&gt;FROM scratch&lt;/code&gt;作为起始指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RUN&lt;/strong&gt; 是Dockerfile的核心指令，用于执行一条命令，由于Dockerfile 每一条指令都会新建一层，所以应该尽量将执行的内容写在一行（多行内容可以通过在末尾加&lt;code&gt;\&lt;/code&gt;以表示未结束），它有两种写法：

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shell&lt;/strong&gt; 格式：&lt;code&gt;RUN &amp;lt;命令&amp;gt;&lt;/code&gt;，就像直接在命令行中输入的命令一样。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec&lt;/strong&gt; 格式：&lt;code&gt;RUN [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;]&lt;/code&gt;，这更像是函数调用中的格式。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WORKDIR&lt;/strong&gt; 表示指定当前工作目录，相当于&lt;code&gt;cd&lt;/code&gt;命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COPY&lt;/strong&gt; 即复制文件到容器中，在这里是把redis.conf文件复制到容器的&lt;code&gt;/etc&lt;/code&gt;目录下。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CMD&lt;/strong&gt; 是启动程序的命令，写法和&lt;code&gt;RUN&lt;/code&gt;相同，一般推荐使用&lt;code&gt;exec&lt;/code&gt;格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用Docker指令列表如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FROM&lt;/td&gt;
&lt;td&gt;指定基础镜像&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FROM &amp;lt;基础镜像&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RUN&lt;/td&gt;
&lt;td&gt;执行指令&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RUN [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;COPY&lt;/td&gt;
&lt;td&gt;复制文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;COPY [&amp;quot;&amp;lt;源路径1&amp;gt;&amp;quot;,... &amp;quot;&amp;lt;目标路径&amp;gt;&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ADD&lt;/td&gt;
&lt;td&gt;更高级的复制文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ADD &amp;quot;&amp;lt;压缩文件&amp;gt;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CMD&lt;/td&gt;
&lt;td&gt;容器启动命令&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CMD [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;...]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ENTRYPOINT&lt;/td&gt;
&lt;td&gt;入口点&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ENTRYPOINT [&amp;quot;可执行文件&amp;quot;, &amp;quot;参数1&amp;quot;, &amp;quot;参数2&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ENV&lt;/td&gt;
&lt;td&gt;设置环境变量&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ENV &amp;lt;key1&amp;gt;=&amp;lt;value1&amp;gt; &amp;lt;key2&amp;gt;=&amp;lt;value2&amp;gt;...&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ARG&lt;/td&gt;
&lt;td&gt;构建参数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ARG &amp;lt;参数名&amp;gt;[=&amp;lt;默认值&amp;gt;]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VOLUME&lt;/td&gt;
&lt;td&gt;定义匿名卷&lt;/td&gt;
&lt;td&gt;&lt;code&gt;VOLUME [&amp;quot;&amp;lt;路径1&amp;gt;&amp;quot;, &amp;quot;&amp;lt;路径2&amp;gt;&amp;quot;...]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;EXPOSE&lt;/td&gt;
&lt;td&gt;暴露端口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EXPOSE &amp;lt;端口1&amp;gt; [&amp;lt;端口2&amp;gt;...]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WORKDIR&lt;/td&gt;
&lt;td&gt;指定工作目录&lt;/td&gt;
&lt;td&gt;&lt;code&gt;WORKDIR &amp;lt;工作目录路径&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;USER&lt;/td&gt;
&lt;td&gt;指定当前用户&lt;/td&gt;
&lt;td&gt;&lt;code&gt;USER &amp;lt;用户名&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;HEALTHCHECK&lt;/td&gt;
&lt;td&gt;健康检查&lt;/td&gt;
&lt;td&gt;`HEALTHCHECK NONE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ONBUILD&lt;/td&gt;
&lt;td&gt;构建下级镜像&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ONBUILD &amp;lt;其它指令&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MAINTAINER&lt;/td&gt;
&lt;td&gt;指定作者&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ONBUILD &amp;lt;作者&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;更多指令及用法请参照&lt;a href=&#34;https://docs.docker.com/engine/reference/builder&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如上，我们完成了一个使用自己配置文件的redis镜像的准备工作，之后依据这个Dockerfile进行构建：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t redis_test:v0.1 .

# 会有类似如下输出：
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM redis
...
...
Removing intermediate container 9cdc27646c7b
Successfully built 44aa4490ce2c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt;的用法为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build [选项] &amp;lt;上下文路径/URL/-&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，可以使用&lt;code&gt;docker push&lt;/code&gt;将你自己构建的镜像上传到仓库中，详细用法见&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/push/&#34; target=&#34;_blank&#34;&gt;官方文档 push&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;容器操作&#34;&gt;容器操作&lt;/h2&gt;

&lt;h3 id=&#34;容器启停&#34;&gt;容器启停&lt;/h3&gt;

&lt;p&gt;我们可以用这样的方式从之前的镜像启动一个容器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name some-redis redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt;的用法为&lt;code&gt;docker run [选项] 镜像 [命令] [参数...]&lt;/code&gt;，其中：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--name&lt;/code&gt; 指定容器的名称， &lt;code&gt;-d&lt;/code&gt; 指定后台运行，其他常用参数包括&lt;code&gt;-i&lt;/code&gt; 交互式操作，&lt;code&gt;-t&lt;/code&gt; 使用终端（&lt;code&gt;it&lt;/code&gt;一般同时使用），&lt;code&gt;--rm&lt;/code&gt; 容器退出后随之将其删除，完整参数列表可以通过&lt;code&gt;--help&lt;/code&gt;或者&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/&#34; target=&#34;_blank&#34;&gt;在线文档 docker run&lt;/a&gt;查看&lt;/p&gt;

&lt;p&gt;由于我们是在后台运行，使用&lt;code&gt;docker container ls&lt;/code&gt;来查看容器相关情况，如果要查看停止的进程，后面需要增加参数&lt;code&gt;-a&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container ls

# 会看到类似如下内容
CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES
77b2dc01fe0f  redis:v2  redis-server redis.conf &#39;while tr  2 minutes ago  Up 1 minute        agitated_wright
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;docker container stop&lt;/code&gt;来结束容器的运行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container stop 77b2dc01fe0f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似的，使用&lt;code&gt;docker container start | restart | stop&lt;/code&gt;可以控制容器的启停，
使用&lt;code&gt;docker container rm&lt;/code&gt; 来删除指定容器。&lt;/p&gt;

&lt;h3 id=&#34;数据管理&#34;&gt;数据管理&lt;/h3&gt;

&lt;p&gt;之前提到过，随着容器的销毁，容器内的数据也会一同丢失。为了保存数据，Docker提供了两种方式（还有一种tmpfs mountsb不常用到）：&lt;/p&gt;

&lt;h4 id=&#34;方式1-数据卷-推荐&#34;&gt;方式1：数据卷（推荐）&lt;/h4&gt;

&lt;p&gt;数据卷 &lt;code&gt;volume&lt;/code&gt; 是一个可供一个或多个容器使用的特殊目录，它不依赖于Unix文件系统，也拥有独立于容器的生命周期。&lt;/p&gt;

&lt;p&gt;创建一个数据卷:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker volume create my-vol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看数据卷及具体信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 查看所有的数据卷
docker volume ls

# 会看到类似如下内容
local               my-vol

# -----------------------------------

# 查看具体卷的信息
docker volume inspect my-vol

# 会看到类似如下内容
[
    {
        &amp;quot;Driver&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Labels&amp;quot;: {},
        &amp;quot;Mountpoint&amp;quot;: &amp;quot;/var/lib/docker/volumes/my-vol/_data&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;my-vol&amp;quot;,
        &amp;quot;Options&amp;quot;: {},
        &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在用 docker run 的时候，增加 &lt;code&gt;--mount&lt;/code&gt; 参数来使用数据卷,还是以启动redis为例，这里我们启动redis并且开启aof持久化：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \
    --name redis \
    --mount source=my-vol,target=/data \
    # -v my-vol:/data \
    redis \
    redis-server --appendonly yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里redis产生的数据（&lt;code&gt;/data&lt;/code&gt;目录下）被挂载到数据卷&lt;code&gt;my-vol&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;我们也可以使用&lt;code&gt;-v&lt;/code&gt;或者&lt;code&gt;--volume&lt;/code&gt;语法，但是&lt;a href=&#34;https://docs.docker.com/storage/volumes/#choose-the--v-or---mount-flag&#34; target=&#34;_blank&#34;&gt;官方建议&lt;/a&gt;尽量使用&lt;code&gt;--mount&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;同样使用&lt;code&gt;inspect&lt;/code&gt;语法，我们可以查看redis容器的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect redis

# 会看到类似如下内容
&amp;quot;Mounts&amp;quot;: [
    {
        &amp;quot;Type&amp;quot;: &amp;quot;volume&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;my-vol&amp;quot;,
        &amp;quot;Source&amp;quot;: &amp;quot;/var/lib/docker/volumes/my-vol/_data&amp;quot;,
        &amp;quot;Destination&amp;quot;: &amp;quot;/data&amp;quot;,
        &amp;quot;Driver&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Mode&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;RW&amp;quot;: true,
        &amp;quot;Propagation&amp;quot;: &amp;quot;&amp;quot;
    }
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;方式2-绑定主机目录&#34;&gt;方式2：绑定主机目录&lt;/h4&gt;

&lt;p&gt;我们也可以直接将容器的数据挂载 &lt;code&gt;bind mount&lt;/code&gt;到宿主机的目录或文件 （而非由Docker创建的数据卷）,以当前目录&lt;code&gt;$(pwd)&lt;/code&gt;为例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \
    --name redis \
    --mount type=bind,source=&amp;quot;$(pwd)&amp;quot;/target,target=/data \
    redis \
    redis-server --appendonly yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;挂载单独文件的方法类似。&lt;/p&gt;

&lt;p&gt;需要注意，本地目录必须存在，否则会报错。&lt;/p&gt;

&lt;h4 id=&#34;区别&#34;&gt;区别&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://szthanatos.github.io/img/types-of-mounts-volume.png&#34; alt=&#34;types of mounts volume&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Volumes是由Docker创建和管理，存储在宿主机固定位置（在linux上是/var/lib/docker/volumes/）。 &lt;strong&gt;非Docker应用程序不能改动这一位置的数据。&lt;/strong&gt; 一个数据卷可以同时被挂载到几个容器中。即使没有正在运行的容器使用这个数据卷，它依然不会清除。可以通过&lt;code&gt;docker volume prune&lt;/code&gt;清除不再使用的数据卷。&lt;/p&gt;

&lt;p&gt;Bind mounts的数据可以存放在宿主机的任何地方。 &lt;strong&gt;非Docker应用程序可以改变这些数据。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用网络&#34;&gt;使用网络&lt;/h3&gt;

&lt;h4 id=&#34;端口映射&#34;&gt;端口映射&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt;的时候使用&lt;code&gt;-P&lt;/code&gt;(&amp;ndash;publish-all)参数，随机映射一个 49000~49900 的端口到内部容器开放的网络端口。&lt;/p&gt;

&lt;p&gt;或者使用&lt;code&gt;-p ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort&lt;/code&gt;(&amp;ndash;publish)来指定具体端口映射：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \
    --name some-redis \
    -p 6379:6379 \
    -p 127.0.0.1::16379/udp
    -p 127.0.0.1:80:80
    redis  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们分别将容器的6379端口映射到宿主机 &lt;strong&gt;任意ip的6379端口&lt;/strong&gt; ，容器的16379 udp端口映射到宿主机的 &lt;strong&gt;任意端口&lt;/strong&gt; ，容器的80端口映射到宿主机 &lt;strong&gt;对应的80端口&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;docker port&lt;/code&gt; 可以查看对应容器的全部端口映射。&lt;/p&gt;

&lt;h4 id=&#34;容器互联&#34;&gt;容器互联&lt;/h4&gt;

&lt;p&gt;简单的容器互联可以通过&lt;code&gt;--link&lt;/code&gt; 实现，但是 &lt;strong&gt;官方未来可能会删除这个参数&lt;/strong&gt; ，所以不展开。&lt;/p&gt;

&lt;p&gt;最新的方式是搭建docker网络实现容器互联，先创建一个新的 Docker 网络：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker network create -d bridge my-net
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;-d&lt;/code&gt; 参数指定网络类型，常用的只有bridge，其他的可能会在Swarm用到,如果不知道Swarm是什么就不用在意。&lt;/p&gt;

&lt;p&gt;以redis客户端/服务端为例，分别在启动的时候将之加入&lt;code&gt;my-net&lt;/code&gt;网络：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \
    --name redis-server \
    --network my-net \
    redis 

docker run -it \
    --rm \
    --name redis-client \
    --network my-net \
    redis redis-cli -h redis-server

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到成功进入redis-cli客户端，我们可以尝试&lt;code&gt;info&lt;/code&gt;/&lt;code&gt;keys *&lt;/code&gt;或者其他命令查看redis服务端运行情况。&lt;/p&gt;

&lt;h2 id=&#34;延申&#34;&gt;延申&lt;/h2&gt;

&lt;h3 id=&#34;容器编排&#34;&gt;容器编排&lt;/h3&gt;

&lt;p&gt;面临一组容器配合使用的情况，例如一个包括负载均衡——网站后台——数据库的Web系统，我们可以使用Docker提供的&lt;a href=&#34;https://github.com/docker/compose&#34; target=&#34;_blank&#34;&gt;Compose&lt;/a&gt;完成统一配置管理。它将提供相同功能的容器定义为服务&lt;code&gt;service&lt;/code&gt;——以方便复用；将完整的容器组合组成项目&lt;code&gt;project&lt;/code&gt;以方便统一管理。所有的配置通过一个yml文件即可实现。&lt;/p&gt;

&lt;h3 id=&#34;nvidia-docker&#34;&gt;Nvidia Docker&lt;/h3&gt;

&lt;p&gt;对使用GPU的容器，Docker提供&lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34; target=&#34;_blank&#34;&gt;Nvidia Docker&lt;/a&gt;以发挥GPU的运算性能。&lt;/p&gt;

&lt;p&gt;基本要求如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GNU/Linux x86_64 with kernel version &amp;gt; 3.10&lt;/li&gt;
&lt;li&gt;Docker &amp;gt;= 1.12&lt;/li&gt;
&lt;li&gt;NVIDIA GPU with Architecture &amp;gt; Fermi (2.1)&lt;/li&gt;
&lt;li&gt;NVIDIA drivers ~= 361.93 (untested on older versions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;详细安装使用见&lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker/wiki/Installation-(version-2.0)&#34; target=&#34;_blank&#34;&gt;官方项目Wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Palantir一分钟印象</title>
      <link>https://szthanatos.github.io/post/palantir_intro/</link>
      <pubDate>Wed, 05 Dec 2018 17:09:21 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/palantir_intro/</guid>
      <description>

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Palantir是全球第一大&lt;code&gt;大数据公司&lt;/code&gt;。曾经的全球四大独角兽之一（其它三家是Uber，Airbnb和小米）。中文名帕兰提尔，源于《指环王》中邪恶巫师萨鲁曼使用的可穿越时空、洞悉世间一切的水晶球(Palantiri)。主要客户为政府机构和金融机构。&lt;/p&gt;

&lt;p&gt;最出名的案例是以大数据技术帮助美国军方成功定位和击毙基地组织首脑本·拉登，以及协助多家银行追回了纳斯达克前主席麦道夫Bernie Madoff的庞氏骗局中所隐藏起来的数十亿美元巨款。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;最新情况&#34;&gt;最新情况&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018年10月29日&lt;/strong&gt;，Palantir正在建立ICE的案例管理软件 —— &lt;a href=&#34;http://aldianews.com/articles/politics/immigration/technology-companies-are-ices-dark-allies/54287&#34; target=&#34;_blank&#34;&gt;AL DIA News&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018年10月23日&lt;/strong&gt;，亚马逊、微软、Palantir等科技公司在特朗普的移民法案中起到重要作用 —— &lt;a href=&#34;https://www.commondreams.org/news/2018/10/23/amazon-microsoft-and-palantir-among-tech-giants-making-huge-profits-trumps&#34; target=&#34;_blank&#34;&gt;Common Dreams&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018年10月19日&lt;/strong&gt;，Palantir或明年上市，估值达410亿美元 —— &lt;a href=&#34;https://www.vanityfair.com/news/2018/10/palantir-peter-thiels-all-seeing-eye-looks-to-a-41-billion-dollar-ipo&#34; target=&#34;_blank&#34;&gt;MAYA KOSOFF&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018年09月14日&lt;/strong&gt;，美国陆军决议中止对Palantir2.06亿美元的采购合同 —— &lt;a href=&#34;https://www.law360.com/articles/1082813/army-wrongly-ignored-palantir-in-206m-deal-fed-circ-says&#34; target=&#34;_blank&#34;&gt;LAW 360&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018年03月14日&lt;/strong&gt;，雷神、Palantir 拿下美国陆军8.76亿美元合同 —— &lt;a href=&#34;https://www.reuters.com/article/us-raytheon-pentagon/raytheon-palantir-win-876-million-u-s-defense-contract-pentagon-idUSKCN1GL2HR&#34; target=&#34;_blank&#34;&gt;reuters&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2018年03月02日&lt;/strong&gt;，传Palantir在新奥尔良秘密测试犯罪预测技术，最神秘的独角兽再陷隐私风波 —— &lt;a href=&#34;https://www.lieyunwang.com/archives/416481&#34; target=&#34;_blank&#34;&gt;猎云网&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Palantir发布&lt;a href=&#34;https://www.palantir.com/philanthropy-engineering/annual-report/2017/&#34; target=&#34;_blank&#34;&gt;2017年度报告&lt;/a&gt; 重点提到在哈维飓风的救援以及灾后重建工作，以及帮助世界粮食计划署运输食品以对抗饥饿的工作中所起到的作用。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;创始人&#34;&gt;创始人&lt;/h2&gt;

&lt;h4 id=&#34;peter-thiel&#34;&gt;Peter Thiel&lt;/h4&gt;

&lt;p&gt;斯坦福本科及法学院JD的高材生，《从0到1》的作者。创立了Clarium Capital、Founders Fund、Valar Ventures、、Mithril Capital Management等多支基金。Paypal创始人之一并出任 CEO。2002年paypal被收购之后，以投资人身份投资包括Facebook、Asana、Quora、LinkedIn、Yelp、Yammer在内的诸多当今一线公司。号称硅谷创投教父。&lt;/p&gt;

&lt;h4 id=&#34;alex-karp-ceo&#34;&gt;Alex Karp (CEO)&lt;/h4&gt;

&lt;p&gt;哈佛本科毕业，斯坦福法学JD学位，德国法兰克福大学新古典社会理论方向博士学位，师从本世纪最伟大的哲学家之一哈贝马斯。早年继承家产后成为硅谷著名投资人，并在伦敦创立Caedmon Group基金管理投资。目前坚持保持单身，热爱气功、游泳以及与员工讲马克思还有带领员工在硅谷打太极。Peter Thiel在斯坦福的室友。&lt;/p&gt;

&lt;h4 id=&#34;joe-lonsdale&#34;&gt;Joe Lonsdale&lt;/h4&gt;

&lt;p&gt;斯坦福计算机系毕业。除Palantir外，还曾创办另外两家高科技公司，和硅谷最大的面向亚洲的风投基金Formation8、 8vc。管理着5000亿美元财富。此外，还是《福布斯》评选出的12位行业未来之星之一，还被美国媒体评为硅谷排名第二的天使投资人。&lt;/p&gt;

&lt;h4 id=&#34;stephen-cohen&#34;&gt;Stephen Cohen&lt;/h4&gt;

&lt;p&gt;毕业于斯坦福计算机系的高级工程师。&lt;/p&gt;

&lt;h4 id=&#34;nathan-gettings&#34;&gt;Nathan Gettings&lt;/h4&gt;

&lt;p&gt;来自于PayPal的的高级工程师。在PayPal负责风险和研发的总监，曾以开发了反欺诈的系统而闻名于世。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;发展历程&#34;&gt;发展历程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2004年Palantir公司创立于加利福尼亚州帕洛阿尔托。创业初期Palantir并不被人看好，融资过程也是屡屡受阻，包括红杉资本，凯鹏华盈两大VC基金都不看好Palantir的发展。经过多次奔走博弈，最终，Palantir赢得了CIA的创投基金的2轮投资，从而走上了发展的正轨。&lt;/li&gt;
&lt;li&gt;2004到2009年，Palantir主要业务还是服务于美国政府部门，提供情报分析，防欺诈、反恐等服务。&lt;/li&gt;
&lt;li&gt;2010年，Palantir开始提供企业服务，实现业务多元化。&lt;/li&gt;
&lt;li&gt;2010年7月，当时已经拥有250位工程师的Palantir完成9000万美元的D轮融资，估值达到7.35亿美元。&lt;/li&gt;
&lt;li&gt;2011年5月6日，融资5000万美元，累计融资额达到了1.75亿美元。&lt;/li&gt;
&lt;li&gt;2011年10月7日，融资7000万美元，估值25亿美元。&lt;/li&gt;
&lt;li&gt;2013年9月29日，融资1.96亿美元，估值60亿美元。&lt;/li&gt;
&lt;li&gt;2013年12月，Palantir新一轮融资1.075亿美元，同时估值达到90亿美元。此时Palantir的年收入已经超过4.5亿美元。&lt;/li&gt;
&lt;li&gt;2014年11月，Palantir再拿到5亿美元投资，企业用户突破14000家，估值达到了150亿美元。&lt;/li&gt;
&lt;li&gt;2015年年底，Palantir获得8.8亿美元的融资，市值达到200亿美元。成为继 Uber、小米、Airbnb 之后，全球估值第四高的创业公司。（截至2018年11月最后一笔融资）&lt;/li&gt;
&lt;li&gt;2016年2月，收购Kimono Labs&lt;/li&gt;
&lt;li&gt;2016年5月，Buzzfeed爆料,数司百名员工离职，多个重要客户不再续约。&lt;/li&gt;
&lt;li&gt;2016年8月，Palantir收购数据可视化公司Silk。&lt;/li&gt;
&lt;li&gt;2018年10月，Palantir预备明年下半年上市，公司估值或将达410亿美元
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;产品内容&#34;&gt;产品内容&lt;/h2&gt;

&lt;h3 id=&#34;官方主页-home-palantir-https-www-palantir-com&#34;&gt;官方主页： &lt;a href=&#34;https://www.palantir.com/&#34; target=&#34;_blank&#34;&gt;Home | Palantir&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&#34;产品线&#34;&gt;产品线&lt;/h3&gt;

&lt;p&gt;目前Palantir仅保留两条产品线：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/palantir-gotham/&#34; target=&#34;_blank&#34;&gt;Palantir Gotham&lt;/a&gt;&lt;/strong&gt; 一个集成，管理，保护和分析多来源的企业数据的复合平台。命名来源于蝙蝠侠所在的哥谭市。作为后端，Gotham平台可用于集成许多不同的数据源，以进行安全的协作分析；也可以存储企业的各类建模分析数据，充当企业知识库。而在前端, Gotham平台提供了一套针对语义，时间，地理空间和全文分析的分析工具集合。为Gotham提供支撑的子产品包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHOENIX&lt;/strong&gt; 支持PB级的数万亿条记录进行亚秒级查询的集群数据库；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAPTOR&lt;/strong&gt; 提供对外部数据源进行联合查询,并实时加入数据库的检索工具；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SEARCH&lt;/strong&gt; 提供对系统中结构化和非结构化数据的全文检索的搜索引擎；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HORIZON&lt;/strong&gt; 允许用户在数十亿个对象中查询并在约10秒内收到结果的,类Spark设计的内存数据库；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DYNAMIC ONTOLOGY&lt;/strong&gt; 高度灵活和动态的数据建模工具；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REVISIONING DATABASE&lt;/strong&gt; RevDB是Gotham平台的持久化数据管理工具，类似Zookeeper之于Hadoop；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ATLASDB&lt;/strong&gt; 作为RevDB的具体数据存储单元，结合了NoSQL数据存储的简单性和可扩展性与传统SQL数据库的事务安全性和一致性；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEXUS PEERING&lt;/strong&gt; 分布式系统平台，上面的各个组件都建立在这个平台之上；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/palantir-foundry/&#34; target=&#34;_blank&#34;&gt;Palantir Foundry&lt;/a&gt;&lt;/strong&gt; ：数据集成/分析平台，将后端的数据存储和前端的数据分析打通，让任何人都能连接到不同数据源轻松进行建模分析。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解决方案&#34;&gt;解决方案&lt;/h3&gt;

&lt;p&gt;Palantir面向以下领域直接提供解决方案：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/automotive&#34; target=&#34;_blank&#34;&gt;汽车制造业&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/cyber/&#34; target=&#34;_blank&#34;&gt;网络安全&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/financial-compliance/&#34; target=&#34;_blank&#34;&gt;金融合规&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/insider-threat/&#34; target=&#34;_blank&#34;&gt;企业内部信息安全&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/intelligence/&#34; target=&#34;_blank&#34;&gt;商业情报分析&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/legal-intelligence/&#34; target=&#34;_blank&#34;&gt;法律诉讼&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/mergers-and-acquisitions/&#34; target=&#34;_blank&#34;&gt;并购支持&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/revenue-maximization/&#34; target=&#34;_blank&#34;&gt;收入最大化&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/case-management/&#34; target=&#34;_blank&#34;&gt;数据组织&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/defense/&#34; target=&#34;_blank&#34;&gt;国土防卫&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/gdpr/&#34; target=&#34;_blank&#34;&gt;欧盟通用数据保护监管&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/insurance-analytics&#34; target=&#34;_blank&#34;&gt;保险分析&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/law-enforcement/&#34; target=&#34;_blank&#34;&gt;公共执法&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/manufacturing/&#34; target=&#34;_blank&#34;&gt;制造业&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/pharma/&#34; target=&#34;_blank&#34;&gt;医药研发&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.palantir.com/solutions/skywise&#34; target=&#34;_blank&#34;&gt;航空业&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
