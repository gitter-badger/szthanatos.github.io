<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kryptonite Lab on Kryptonite Lab</title>
    <link>https://szthanatos.github.io/</link>
    <description>Recent content in Kryptonite Lab on Kryptonite Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>https://szthanatos.github.io/about/about/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/about/about/</guid>
      <description>

&lt;h1 id=&#34;biography&#34;&gt;Biography&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>熟悉领域</title>
      <link>https://szthanatos.github.io/about/skills/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/about/skills/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Experience</title>
      <link>https://szthanatos.github.io/about/experience/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://szthanatos.github.io/about/experience/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git三棵树和reset/checkout命令</title>
      <link>https://szthanatos.github.io/post/git_trees/</link>
      <pubDate>Sat, 05 Jan 2019 14:13:21 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/git_trees/</guid>
      <description>

&lt;p&gt;理解Git没有比从三棵树开始更好的了。&lt;/p&gt;

&lt;p&gt;完整的话还是看&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86&#34; target=&#34;_blank&#34;&gt;git文档&lt;/a&gt;比较好，说的蛮清楚了。&lt;/p&gt;

&lt;h2 id=&#34;三棵树和正向流程&#34;&gt;三棵树和正向流程&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;树&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HEAD&lt;/td&gt;
&lt;td&gt;上一次提交的快照，下一次提交的父结点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;预期的下一次提交的快照&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Working Directory&lt;/td&gt;
&lt;td&gt;沙盒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;git的核心工作就是管理这三棵树。&lt;code&gt;git add&lt;/code&gt;就是把你工作目录(Working Directory)的修改提交到暂存区(Index)，&lt;code&gt;git commit&lt;/code&gt;就是把暂存区的内容同步到仓库里作为一个快照，并移动&lt;code&gt;HEAD&lt;/code&gt;指向新快照；&lt;img src=&#34;https://szthanatos.github.io/img/git_flow.gif&#34; alt=&#34;git_flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;额外说一下这个&lt;code&gt;HEAD指针&lt;/code&gt;，每一次commit都相当于在仓库(Repository)里生成一个快照，
把N个快照想象成一个右进左出的队列(List)，再想象有一个指针，默认指向队首(最新快照)，告诉你当前到底用的是哪一个版本快照。&lt;/p&gt;

&lt;h2 id=&#34;reset&#34;&gt;reset&lt;/h2&gt;

&lt;p&gt;显然，&lt;code&gt;git reset&lt;/code&gt;就是对上述行为的反向操作。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reset&lt;/code&gt;的本质其实是移动&lt;code&gt;HEAD&lt;/code&gt;指针指向哪个快照，而通过&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt;——只改变指针指向的快照；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mixed&lt;/code&gt;——移动指针的同时也把快照内容同步到暂存区；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--hard&lt;/code&gt;——三棵树全同步为指针指向的快照；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参数来&lt;strong&gt;递进的&lt;/strong&gt;控制改变是发生在哪几颗树上。&lt;img src=&#34;https://szthanatos.github.io/img/git_reflow.gif&#34; alt=&#34;git_reflow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再强调一遍，&lt;code&gt;reset&lt;/code&gt;的改变的是&lt;code&gt;HEAD&lt;/code&gt;指针，而不是文件。即使&lt;code&gt;git reset File&lt;/code&gt;的写法是有效的，但它的本质是&lt;code&gt;git reset --mixed HEAD File&lt;/code&gt;的缩写，即将&lt;code&gt;File&lt;/code&gt;从&lt;code&gt;HEAD&lt;/code&gt;指向的快照复制到索引中。&lt;code&gt;HEAD&lt;/code&gt;指针永远只能指向一个快照，但是快照是可以局部修改它里面的文件的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEAD~&lt;/code&gt;表示前一个快照，&lt;code&gt;HEAD~2&lt;/code&gt;表示前两个，依此类推。&lt;/p&gt;

&lt;h2 id=&#34;checkout&#34;&gt;checkout&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;checkout&lt;/code&gt;的本质就有所不同，它关心的是分支(branch)，它的主要作用是让&lt;code&gt;HEAD&lt;/code&gt;在不同分支间移动(默认三棵树都会更新)。&lt;/p&gt;

&lt;p&gt;还是拿刚才那个队列举例，分支相当于是平行的一条队列，现在把他放在你脑子里之前那个队列的上方，
由于&lt;code&gt;HEAD&lt;/code&gt;指针只能指向一个快照，所以这个时候它可能会在两个队列间“跳动”，&lt;code&gt;checkout&lt;/code&gt;就是控制指针上下移动的命令，而&lt;code&gt;reset&lt;/code&gt;则是控制指针在当前队列左右(前后)移动。&lt;img src=&#34;https://szthanatos.github.io/img/git_checkout.gif&#34; alt=&#34;git_chechout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;同样的，&lt;code&gt;checkout&lt;/code&gt;后面也可以跟一个文件，和&lt;code&gt;git reset --hard [branch] file&lt;/code&gt;可能会产生的效果一样。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(翻译)Academic文档-内容编写</title>
      <link>https://szthanatos.github.io/post/academic/trans_writing_content/</link>
      <pubDate>Tue, 01 Jan 2019 12:54:29 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/academic/trans_writing_content/</guid>
      <description>

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;本文是对&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;Academic文档-Writing content章节&lt;/a&gt;的个人翻译，基于个人理解，不保证绝对准确。&lt;/p&gt;

&lt;p&gt;原文见上方连接。&lt;/p&gt;

&lt;/div&gt;


&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#副标题&#34;&gt;副标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#强调&#34;&gt;强调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#有序列表&#34;&gt;有序列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#无序列表&#34;&gt;无序列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#图片&#34;&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#图片集&#34;&gt;图片集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#视频&#34;&gt;视频&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#本地视频文件&#34;&gt;本地视频文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#youtube&#34;&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vimeo&#34;&gt;Vimeo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#链接&#34;&gt;链接&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#标签和分类&#34;&gt;标签和分类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#emojis&#34;&gt;Emojis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#段落引用&#34;&gt;段落引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#高亮引用&#34;&gt;高亮引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#脚注&#34;&gt;脚注&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#嵌入文档&#34;&gt;嵌入文档&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#speaker-deck&#34;&gt;Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#代码高亮&#34;&gt;代码高亮&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#高亮选项&#34;&gt;高亮选项&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#highlight-选项&#34;&gt;&lt;code&gt;highlight&lt;/code&gt;选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#highlight-languages-选项&#34;&gt;&lt;code&gt;highlight_languages&lt;/code&gt;选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#highlight-style-选项&#34;&gt;&lt;code&gt;highlight_style&lt;/code&gt;选项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#twitter-tweet&#34;&gt;Twitter tweet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#github-gist&#34;&gt;GitHub gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#latex-数学公式&#34;&gt;LATEX 数学公式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#多行方程式&#34;&gt;多行方程式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#论文摘要&#34;&gt;论文摘要&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#表格&#34;&gt;表格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#警报&#34;&gt;警报&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#目录&#34;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;p&gt;Academic支持使用Markdown、LaTeX数学公式和Hugo代码段编写内容。
此外，可以使用HTML以实现高级样式。
本文概述最常见的格式选项。&lt;/p&gt;

&lt;h2 id=&#34;副标题&#34;&gt;副标题&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## Heading 2
### Heading 3
#### Heading 4
##### Heading 5
###### Heading 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;强调&#34;&gt;强调&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 下划线内为斜体
Italics with _underscores_.

# *内为粗体
Bold with **asterisks**.

# 粗体和斜体可以组合
Combined emphasis with **asterisks and _underscores_**.

# 双波浪符内为删除线
Strikethrough with ~~two tildes~~.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;有序列表&#34;&gt;有序列表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;1. First item
2. Another item
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;无序列表&#34;&gt;无序列表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;我个人更习惯用 - 
* First item
* Another item
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;图片&#34;&gt;图片&lt;/h2&gt;

&lt;p&gt;图片可以存放在你的媒体库&lt;code&gt;static/img&lt;/code&gt;或你的&lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34; target=&#34;_blank&#34;&gt;页面文件夹&lt;/a&gt;。
使用以下任一方式即可引用图片：&lt;/p&gt;

&lt;p&gt;假设图片来自你的&lt;code&gt;static/img&lt;/code&gt;媒体库：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; figure library=&amp;quot;1&amp;quot; src=&amp;quot;image.jpg&amp;quot; title=&amp;quot;A caption&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假设图片来自你的页面文件夹(比如&lt;code&gt;content/post/hello/&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; figure src=&amp;quot;image.jpg&amp;quot; title=&amp;quot;A caption&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;带编号和标题的图片：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; figure src=&amp;quot;image.jpg&amp;quot; title=&amp;quot;A caption&amp;quot; numbered=&amp;quot;true&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般图片：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;![alternative text for search engines](/img/image.jpg)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;图片集&#34;&gt;图片集&lt;/h2&gt;

&lt;p&gt;为页面包增加一个图片集：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34; target=&#34;_blank&#34;&gt;页面包&lt;/a&gt;(也就是你的页面文件夹)内创建图片集文件夹；&lt;/li&gt;
&lt;li&gt;将图片放入图片集文件夹；&lt;/li&gt;
&lt;li&gt;粘贴&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{&amp;lt; gallery album=&amp;quot;&amp;lt;ALBUM FOLDER&amp;gt;&amp;quot; &amp;gt;}&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;到文章中你想要它出现的地方，将album参数修改为你文件集的名称；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可选的，要为你的图片集添加标题的话，将下面的实例添加到你扉页的尾部:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[[gallery_item]]
album = &amp;quot;&amp;lt;ALBUM FOLDER&amp;gt;&amp;quot;
image = &amp;quot;&amp;lt;IMAGE NAME&amp;gt;.jpg&amp;quot;
caption = &amp;quot;Write your image caption here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，想要在图片集中使用网络位置/媒体库中的图片；&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将图片添加到&lt;code&gt;static/img/&lt;/code&gt;文件夹；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在文章的扉页尾部声明图片引用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[[gallery_item]]
album = &amp;quot;1&amp;quot;
image = &amp;quot;my_image.jpg&amp;quot;
caption = &amp;quot;Write your image caption here&amp;quot;
        
[[gallery_item]]
album = &amp;quot;1&amp;quot;
image = &amp;quot;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-dark.png&amp;quot;
caption = &amp;quot;Dark theme&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在正文要显示的位置使用&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{&amp;lt; gallery album=&amp;quot;1&amp;quot; &amp;gt;}&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;视频&#34;&gt;视频&lt;/h2&gt;

&lt;p&gt;页面可以添加以下几种类型的视频。&lt;/p&gt;

&lt;h3 id=&#34;本地视频文件&#34;&gt;本地视频文件&lt;/h3&gt;

&lt;p&gt;要添加视频，将它放在&lt;code&gt;static/img/&lt;/code&gt;媒体库或者页面文件夹内，使用以下任一方式即可引用。&lt;/p&gt;

&lt;p&gt;位于&lt;code&gt;static/img/&lt;/code&gt;文件夹下的视频：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; video library=&amp;quot;1&amp;quot; src=&amp;quot;my_video.mp4&amp;quot; controls=&amp;quot;yes&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;位于页面文件夹下的视频：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; video src=&amp;quot;my_video.mp4&amp;quot; controls=&amp;quot;yes&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;youtube&#34;&gt;Youtube&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; youtube w7Ft2ymGmfc &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vimeo&#34;&gt;Vimeo&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; vimeo 146022717 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;链接&#34;&gt;链接&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[I&#39;m a link](https://www.google.com)
[A post]({{&amp;lt; ref &amp;quot;post/hi.md&amp;quot; &amp;gt;}})
[A publication]({{&amp;lt; ref &amp;quot;publication/hi.md&amp;quot; &amp;gt;}})
[A project]({{&amp;lt; ref &amp;quot;project/hi.md&amp;quot; &amp;gt;}})
[Another section]({{&amp;lt; relref &amp;quot;hi.md#who&amp;quot; &amp;gt;}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;想要链接到一个文件，比如PDF，首先将它放到&lt;code&gt;static/files/&lt;/code&gt;文件夹下，然后使用下面方式链接：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{% staticref &amp;quot;files/cv.pdf&amp;quot; &amp;quot;newtab&amp;quot; %}}Download my CV{{% /staticref %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;staticref&lt;/code&gt;的&lt;code&gt;&amp;quot;newtab&amp;quot;&lt;/code&gt;参数将使链接在新页面打开。&lt;/p&gt;

&lt;h3 id=&#34;标签和分类&#34;&gt;标签和分类&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{&amp;lt; list_tags &amp;gt;}&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;生成标签链接列表，使用&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{&amp;lt; list_categories &amp;gt;}&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;生成分类链接列表。&lt;/p&gt;

&lt;h2 id=&#34;emojis&#34;&gt;Emojis&lt;/h2&gt;

&lt;p&gt;可用Emojis见&lt;a href=&#34;http://www.webpagefx.com/tools/emoji-cheat-sheet/&#34; target=&#34;_blank&#34;&gt;Emoji cheat sheet&lt;/a&gt;。
下面的这个示例在实际使用时需要把:和表情名之前的空格去掉：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;I : heart : Academic : smile :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ❤️ Academic 😄&lt;/p&gt;

&lt;h2 id=&#34;段落引用&#34;&gt;段落引用&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; This is a blockquote.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;高亮引用&#34;&gt;高亮引用&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;This is a {{&amp;lt; hl &amp;gt;}}highlighted quote{{&amp;lt; /hl &amp;gt;}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a &lt;span class=&#34;markup-quote&#34;&gt;highlighted quote&lt;/span&gt;.&lt;/p&gt;

&lt;h2 id=&#34;脚注&#34;&gt;脚注&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;I have more [^1] to say.
[^1]: Footnote example.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;嵌入文档&#34;&gt;嵌入文档&lt;/h2&gt;

&lt;p&gt;下面几种类型的文档可以被嵌入到页面中。&lt;/p&gt;

&lt;p&gt;要插入&lt;strong&gt;谷歌文档&lt;/strong&gt; (比如幻灯片)点击Google Docs中的 &lt;em&gt;File &amp;gt; Publish to web &amp;gt; Embed&lt;/em&gt; 并复制&lt;code&gt;src=&amp;quot;...&amp;quot;&lt;/code&gt;部分中的URL。
之后粘贴到下面代码中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; gdocs src=&amp;quot;https://docs.google.com/...&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;speaker-deck&#34;&gt;Speaker Deck&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; speakerdeck 4e8126e72d853c0060001f97 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;代码高亮&#34;&gt;代码高亮&lt;/h2&gt;

&lt;p&gt;将语言的代码，比如&lt;code&gt;python&lt;/code&gt;，作为参数放在三个反引号之后：(打出来```就会被解析，只能加空格了)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; ` ` `python
 # Example of code highlighting
 input_string_var = input(&amp;quot;Enter some data: &amp;quot;)
 print(&amp;quot;You entered: {}&amp;quot;.format(input_string_var))
 ` ` `
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example of code highlighting
input_string_var = input(&amp;quot;Enter some data: &amp;quot;)
print(&amp;quot;You entered: {}&amp;quot;.format(input_string_var))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;高亮选项&#34;&gt;高亮选项&lt;/h3&gt;

&lt;p&gt;Academic主题使用&lt;a href=&#34;https://highlightjs.org/&#34; target=&#34;_blank&#34;&gt;highlight.js&lt;/a&gt;作为高亮的来源，并且默认为所有页面启用。
并且，有一些更细粒度的选项可以控制highlight.js的显示效果。&lt;/p&gt;

&lt;p&gt;下表列出了highlight.js支持的一些选项，包含他们的类型和简短描述。
&lt;strong&gt;config.toml&lt;/strong&gt;列中的&amp;rdquo;yes&amp;rdquo;表示允许在&lt;code&gt;config.toml&lt;/code&gt;中全局设置，
&lt;strong&gt;preamble&lt;/strong&gt;列中的&amp;rdquo;yes&amp;rdquo;表示可以设定在特定页面中。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;config.toml&lt;/th&gt;
&lt;th&gt;preamble&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;highlight&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;启用/禁用高亮&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;highlight_languages&lt;/td&gt;
&lt;td&gt;slice&lt;/td&gt;
&lt;td&gt;选择额外语言&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;highlight_style&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;选择高亮样式&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;highlight-选项&#34;&gt;&lt;code&gt;highlight&lt;/code&gt;选项&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;highlight&lt;/code&gt;选项允许在全局或者特定页面启动/禁止语法高亮。
如果没有明确指定的话，默认会认为你设置了&lt;code&gt;highlight = true&lt;/code&gt;。
也就是说，highlight.js的javascript/css文件会出现在每一个页面文件中。
如果你只希望那些真的需要使用的页面才有语法高亮，
你可以在&lt;code&gt;config.toml&lt;/code&gt;中设置&lt;code&gt;highlight = false&lt;/code&gt;，
之后在需要的页面的扉页覆盖为&lt;code&gt;highlight = true&lt;/code&gt;。
相反，你也可以全局启用语法高亮，在不需要的页面中禁用。
下面给出一张展示不同全局和单独页面设置下，页面是否高亮。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;config.toml&lt;/th&gt;
&lt;th&gt;page preamble&lt;/th&gt;
&lt;th&gt;highlighting enabled for page?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;unset or false&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;highlight-languages-选项&#34;&gt;&lt;code&gt;highlight_languages&lt;/code&gt;选项&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;highlight_languages&lt;/code&gt;选项允许你指定highlight.js支持的，但是不是默认支持的常见的语言。
比如，你想在所有页面高亮Go和clojure语言，那就在&lt;code&gt;config.toml&lt;/code&gt;中设置&lt;code&gt;highlight_languages = [&amp;quot;go&amp;quot;, &amp;quot;clojure&amp;quot;]&lt;/code&gt;。
另外，如果你想为页面只启用特定的语法高亮，那就去页面扉页设置&lt;code&gt;highlight_languages&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;config.toml&lt;/code&gt;和扉页设置的&lt;code&gt;highlight_languages&lt;/code&gt;是累加的。
也就是说，如果&lt;code&gt;config.toml&lt;/code&gt;里设置了&lt;code&gt;highlight_languages = [&amp;quot;go&amp;quot;]&lt;/code&gt;，而扉页设置了&lt;code&gt;highlight_languages = [&amp;quot;ocaml&amp;quot;]&lt;/code&gt;，
那么这个页面会包含两者的高亮文件。&lt;/p&gt;

&lt;p&gt;当你设置了&lt;code&gt;highlight_languages&lt;/code&gt;之后，相应的高亮脚本会由&lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs服务&lt;/a&gt;提供。
要查看支持的语言，访问&lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs page&lt;/a&gt;页面并查找包含&amp;rdquo;languages&amp;rdquo;关键字的链接。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;highlight_languages&lt;/code&gt;选项通过CDN提供了一种方便又容易的方式来满足附加语言的高亮需求。
如果cdnjs提供的默认的文件不能满足你的需求，你可以通过&lt;a href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34; target=&#34;_blank&#34;&gt;个性化指南&lt;/a&gt;中的方法来使用自己的javascript文件。&lt;/p&gt;

&lt;h4 id=&#34;highlight-style-选项&#34;&gt;&lt;code&gt;highlight_style&lt;/code&gt;选项&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;highlight_style&lt;/code&gt;选项允许你使用备选的高亮样式。
比如，如果你想使用solarized-dark样式，你可以在&lt;code&gt;config.toml&lt;/code&gt;中设置&lt;code&gt;highlight_style = &amp;quot;solarized-dark&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果未设置&lt;code&gt;highlight_style&lt;/code&gt;，默认会使用Academic提供的或者在你的&lt;code&gt;static&lt;/code&gt;文件夹下的&lt;code&gt;/css/highlight.min.css&lt;/code&gt;。
Academic提供的默认样式和&lt;code&gt;github&lt;/code&gt;是一致的。&lt;/p&gt;

&lt;p&gt;如果设置了&lt;code&gt;highlight_style&lt;/code&gt;，&lt;code&gt;/css/highlight.min.css&lt;/code&gt;就会被忽略，相应的样式会由&lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs服务&lt;/a&gt;提供。
要查看支持的样式列表，访问&lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs page&lt;/a&gt;页面并查找包含&amp;rdquo;styles&amp;rdquo;关键字的链接。&lt;/p&gt;

&lt;p&gt;可以在&lt;a href=&#34;https://highlightjs.org/static/demo/&#34; target=&#34;_blank&#34;&gt;highlight.js demo page&lt;/a&gt;上查看可用样式。&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;不是所有&lt;a href=&#34;https://highlightjs.org/static/demo/&#34; target=&#34;_blank&#34;&gt;highlight.js demo page&lt;/a&gt;上列出的样式都在&lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs服务&lt;/a&gt;上可用。
如果你想使用不是由cdnjs提供的样式，那么保持&lt;code&gt;highlight_style&lt;/code&gt;未设置，然后将相应文件放到&lt;code&gt;/static/css/highlight.min.css&lt;/code&gt;。&lt;/p&gt;

&lt;/div&gt;


&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;如果你不想更换Academic附带的样式，但是还是想由&lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs&lt;/a&gt;提供服务，那么在&lt;code&gt;config.toml&lt;/code&gt;中设置&lt;code&gt;highlight_style = &amp;quot;github&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;只有在&lt;code&gt;config.toml&lt;/code&gt;中设置的&lt;code&gt;highlight_style&lt;/code&gt;才会生效，在扉页设置的&lt;code&gt;highlight_style&lt;/code&gt;不会生效。&lt;/p&gt;

&lt;h2 id=&#34;twitter-tweet&#34;&gt;Twitter tweet&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; tweet 666616452582129664 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;github-gist&#34;&gt;GitHub gist&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; gist USERNAME GIST-ID &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;latex-数学公式&#34;&gt;LATEX 数学公式&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;$$\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi$$
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
$$\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi$$
&lt;/div&gt;

&lt;p&gt;另外，单行的数学公式可以只用单个&lt;code&gt;$&lt;/code&gt;包裹：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;This is inline: $\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is inline: $\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$&lt;/p&gt;

&lt;p&gt;注意Markdown的特殊符号需要使用反斜杠转义，才能被识别为数学公式而非Markdown关键字。
比如&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;_&lt;/code&gt;应该被替换为&lt;code&gt;\*&lt;/code&gt;和&lt;code&gt;\_&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;多行方程式&#34;&gt;多行方程式&lt;/h3&gt;

&lt;p&gt;标准LaTeX的双反斜杠换行应该被替换为6个反斜杠：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;$$f(k;p\_0^\*) = \begin{cases} p\_0^\* &amp;amp; \text{if }k=1, \\\\\\
1-p\_0^\* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\&lt;br /&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;

&lt;h3 id=&#34;论文摘要&#34;&gt;论文摘要&lt;/h3&gt;

&lt;p&gt;由于Hugo和Academic会尝试解析摘要中的TOML, Markdown, 以及LaTeX内容，论文的&lt;code&gt;abstract&lt;/code&gt;和&lt;code&gt;abstract_short&lt;/code&gt;部分应当遵循下面两个方针：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LaTeX的反斜杠&lt;code&gt;\&lt;/code&gt;应该被转义为双反斜杠，也就是&lt;code&gt;\\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;LaTeX的下划线&lt;code&gt;_&lt;/code&gt;应该被转义为双反斜杠加下划线，也就是&lt;code&gt;\\_&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，&lt;code&gt;abstract = &amp;quot;${O(d_{\max})}$&amp;quot;&lt;/code&gt;就会变成&lt;code&gt;abstract = &amp;quot;${O(d\\_{\\max})}$&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;表格&#34;&gt;表格&lt;/h2&gt;

&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;| Command         | Description         |
| --------------- | ------------------- |
| `hugo`          | Build your website. |
| `hugo serve -w` | View your website.  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Build your website.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hugo serve -w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;View your website.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;警报&#34;&gt;警报&lt;/h2&gt;

&lt;p&gt;在你为文章添加提示、注意项、警告时，警报是一个非常有用的功能。
尤其是对于教程性质的文章。
使用对应的短代码以在文章中显示警报：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;{{% alert note %}}
Here&#39;s a tip or note...
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会显示为如下 &lt;em&gt;注意&lt;/em&gt; 项：&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Here&amp;rsquo;s a tip or note&amp;hellip;&lt;/p&gt;

&lt;/div&gt;


&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;{{% alert warning %}}
Here&#39;s some important information...
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会展示为如下 &lt;em&gt;警告&lt;/em&gt; 项：&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Here&amp;rsquo;s some important information&amp;hellip;&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;p&gt;目录对于长文章或者教程/文档可能特别有用，在你Markdown正文的任何位置使用&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% toc %}&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;短代码自动生成目录。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(翻译)Academic文档-内容管理</title>
      <link>https://szthanatos.github.io/post/academic/trans_managing_content/</link>
      <pubDate>Tue, 01 Jan 2019 12:54:11 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/academic/trans_managing_content/</guid>
      <description>

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;本文是对&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/&#34; target=&#34;_blank&#34;&gt;Academic文档-Managing content章节&lt;/a&gt;的个人翻译，基于个人理解，不保证绝对准确。&lt;/p&gt;

&lt;p&gt;原文见上方连接。&lt;/p&gt;

&lt;/div&gt;


&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#精选图片&#34;&gt;精选图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#标题图片&#34;&gt;标题图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#数学公式和代码&#34;&gt;数学公式和代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#页面特性&#34;&gt;页面特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建一个出版物&#34;&gt;创建一个出版物&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#自动&#34;&gt;自动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#手动&#34;&gt;手动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#关联其它资源&#34;&gt;关联其它资源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建博文&#34;&gt;创建博文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建项目&#34;&gt;创建项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建演讲&#34;&gt;创建演讲&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建幻灯片&#34;&gt;创建幻灯片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建课程或文档&#34;&gt;创建课程或文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建小部件页面&#34;&gt;创建小部件页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建其他页面-e-g-简历&#34;&gt;创建其他页面(e.g. 简历)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#管理列表页&#34;&gt;管理列表页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#移除内容&#34;&gt;移除内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#查看站点更新&#34;&gt;查看站点更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#部署站点&#34;&gt;部署站点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;p&gt;这是一个使用Academic框架管理你的文章的简短指南。
Academic提供的内容模板包括出版物、项目、宣讲、新闻/博客文章、以及小部件页。
之后，你可能同样对&lt;a href=&#34;https://szthanatos.github.io/post/trans_writing_content.md&#34;&gt;使用Markdown、LaTeX数学公式和代码段进行创作&lt;/a&gt;感兴趣。&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Hugo V0.49 版本在使用本指南中的&lt;code&gt;hugo new&lt;/code&gt;命令时存在一个bug，请升级到V0.50及以上。&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;精选图片&#34;&gt;精选图片&lt;/h2&gt;

&lt;p&gt;要在文章页显示一个精选图片，简单的将名为&lt;code&gt;featured.*&lt;/code&gt;(e.g. &lt;code&gt;featured.jpg&lt;/code&gt;)的图片文件拖拽到文章文件夹即可。&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;如果你的页面在它所属的分类文件夹下没有自己的文件夹(&lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34; target=&#34;_blank&#34;&gt;页面包&lt;/a&gt;)，
你可以创建一个和你页面&lt;code&gt;NAME.md&lt;/code&gt;同名的文件夹&lt;code&gt;NAME&lt;/code&gt;，并将页面文件放入文件夹中，变为&lt;code&gt;NAME/index.md&lt;/code&gt;。
这里有一个&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34; target=&#34;_blank&#34;&gt;自动迁移工具&lt;/a&gt;。
使用页面包需要Academic v3+ 以及 Hugo v0.50以上。&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;想要为图片添加标题或者设置一个焦点以控制图片的裁剪？
将下方的参数添加到扉页(也就是md文件&lt;code&gt;+++&lt;/code&gt;括起来的部分)的底部以自定义图片的外观。
标题(caption)参数支持使用Markdown为图片添加标题或描述。
焦点(focal_point)参数确保图片自动缩放的时候主要内容始终可见。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Featured image
# To use, add an image named `featured.jpg/png` to your page&#39;s folder. 
[image]
  # Caption (optional)
  caption = &amp;quot;Photo by [Academic](https://sourcethemes.com/academic/)&amp;quot;

  # Focal point (optional)
  # Options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight
  focal_point = &amp;quot;Smart&amp;quot;
  
  # Show image only in page previews?
  preview_only = false
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;标题图片&#34;&gt;标题图片&lt;/h2&gt;

&lt;p&gt;将下面的header参数添加到扉页的末尾，以在页面顶部展示一个占据全部宽度的标题图片。
图片文件默认会从静态图片文件库&lt;code&gt;static/img/&lt;/code&gt;读取(所以不必写全)，所以下面例子的图片文件的完整路径是&lt;code&gt;static/img/header.png&lt;/code&gt;。
标题参数作用和精选图一致。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[header]
  image = &amp;quot;header.png&amp;quot;
  caption = &amp;quot;Image credit: [**Academic**](https://github.com/gcushen/hugo-academic/)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数学公式和代码&#34;&gt;数学公式和代码&lt;/h2&gt;

&lt;p&gt;要在页面中启用&lt;strong&gt;LaTeX&lt;/strong&gt; 渲染数学公式，在页面的扉页中应该申明&lt;code&gt;math = true&lt;/code&gt;，如同示例网站的例子一样。
或者，在&lt;code&gt;config.toml&lt;/code&gt;中设置&lt;code&gt;math = true&lt;/code&gt;，以在全局范围内允许数学公式渲染。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;config.toml&lt;/code&gt;中设置&lt;code&gt;highlight = false&lt;/code&gt;以全局禁用代码高亮。你可以在需要代码高亮的页面的扉页单独设置&lt;code&gt;highlight = true&lt;/code&gt;。
查看&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#code-highlighting&#34; target=&#34;_blank&#34;&gt;code-highlighting docs&lt;/a&gt;以获取更多细节。&lt;/p&gt;

&lt;h2 id=&#34;页面特性&#34;&gt;页面特性&lt;/h2&gt;

&lt;p&gt;将下述参数添加到页面扉页以管理页面特性：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;reading_time = false  # 显示估计阅读时间
share = false  # 显示分享按钮
profile = false  # 显示作者信息
comments = false  # 显示评论区
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建一个出版物&#34;&gt;创建一个出版物&lt;/h2&gt;

&lt;h3 id=&#34;自动&#34;&gt;自动&lt;/h3&gt;

&lt;p&gt;先进的文献管理工具可以帮助你将你的出版物转化为开源的BibTeX格式。
如果你是新手的话我们推荐你使用流行的开源工具&lt;a href=&#34;https://www.zotero.org/&#34; target=&#34;_blank&#34;&gt;Zotero&lt;/a&gt;来管理你的文献。&lt;/p&gt;

&lt;p&gt;在你的文献管理工具中创建你自己的出版物列表并导出为&lt;code&gt;*.bib&lt;/code&gt;格式的BibTeX文件。&lt;/p&gt;

&lt;p&gt;工具需要Python3环境，所以请先&lt;a href=&#34;https://realpython.com/installing-python/&#34; target=&#34;_blank&#34;&gt;安装Python3&lt;/a&gt;。
同样，为了让你有机会检查Academic管理工具产生的改变，你需要备份你的站点，或者确保它已经处于Git的管理之中。&lt;/p&gt;

&lt;p&gt;打开你的终端或者命令提示符应用，安装Academic管理工具：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install -U academic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;cd&lt;/code&gt;命令进入你的站点目录。&lt;/p&gt;

&lt;p&gt;之后，导入你的出版物：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;academic import --bibtex &amp;lt;path_to_your/publications.bib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个工具尚处于测试阶段，目的是为了给你提供辅助。
所以在发布你的站点之前你应该检查&lt;code&gt;publications&lt;/code&gt;文件夹下产生的内容。
你同样可以看看下一章节&lt;code&gt;手动&lt;/code&gt;部分有关扉页参数的细节，以想办法增强展示效果。&lt;/p&gt;

&lt;p&gt;想要支持这个工具或者提供建议/反馈，请查看&lt;a href=&#34;https://github.com/sourcethemes/academic-admin&#34; target=&#34;_blank&#34;&gt;Academic admin tool项目主页&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;手动&#34;&gt;手动&lt;/h3&gt;

&lt;p&gt;另一种选择，使用命令手动的创建出版物：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new --kind publication publication/&amp;lt;my-publication&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;my-publication&amp;gt;&lt;/code&gt;是你得出版物的名称，使用&lt;code&gt;-&lt;/code&gt;代替空格。&lt;/p&gt;

&lt;p&gt;之后，编辑&lt;code&gt;content/publication/&amp;lt;my-publication&amp;gt;/index.md&lt;/code&gt;内含有你的出版物信息的参数。主要参数如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt;: 标题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: 发布日期 (必须使用有效的TOML日期格式)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;publication_types&lt;/strong&gt;: 使用图例来说明你出版物的类型, e.g. conference proceedings&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;publication&lt;/strong&gt;: 你的出版物发布在什么地方 - 允许使用Markdown以标注斜体或其他.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abstract&lt;/strong&gt;: 摘要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用Markdown格式将你出版物的细节写到文档的正文部分(在&lt;code&gt;+++&lt;/code&gt;部分之后)。
内容会出现在你的出版物页之上。&lt;/p&gt;

&lt;p&gt;要使访客能够阅读到你的作品，将作品的PDF链接填入&lt;code&gt;url_pdf&lt;/code&gt;，或者将作品PDF文件放置到出版物目录并统一为相同命名，这样会自动生成PDF的链接。
举例，如果你的出版物说明位于&lt;code&gt;publication/photons/index.md&lt;/code&gt;，将PDF文件重命名并放到&lt;code&gt;publication/photons/photons.pdf&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;关联其它资源&#34;&gt;关联其它资源&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;url_&lt;/code&gt;链接以指向本地/网络内容。
要关联本地内容的话将之复制到出版物文件夹并使用例如&lt;code&gt;url_code = &amp;quot;code.zip&amp;quot;&lt;/code&gt;的方式添加引用。&lt;/p&gt;

&lt;p&gt;你也可以将下面的代码块添加到扉页，以使用自定义链接按钮：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;url_custom = [{name = &amp;quot;Custom Link 1&amp;quot;, url = &amp;quot;http://example.org&amp;quot;},
              {name = &amp;quot;Custom Link 2&amp;quot;, url = &amp;quot;http://example.org&amp;quot;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;想要在扉页的参数中使用双引号或者反斜杠需要额外添加一个反斜杠，_例子懒得翻_，更多信息请参阅&lt;a href=&#34;https://github.com/toml-lang/toml#user-content-string&#34; target=&#34;_blank&#34;&gt;TOML文档&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;创建博文&#34;&gt;创建博文&lt;/h2&gt;

&lt;p&gt;要创建一篇新文章：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new  --kind post post/my-article-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用你的完整标题和内容填充新生成的&lt;code&gt;content/post/my-article-name.md&lt;/code&gt;文件。&lt;/p&gt;

&lt;p&gt;Academic会自动生成内容摘要并显示在主页上。
如果你不满意自动生成的摘要内容，你可以在文章内容中放置&lt;code&gt;&amp;lt;!&lt;/code&gt;&lt;code&gt;--more--&amp;gt;&lt;/code&gt;以限定摘要的长度，
或者像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;summary = &amp;quot;Summary of my post.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在扉页内添加&lt;code&gt;summary&lt;/code&gt;参数以覆盖自动生成的摘要。&lt;/p&gt;

&lt;p&gt;要为特定的文章禁止评论，在扉页添加&lt;code&gt;disable_comments = true&lt;/code&gt;参数。
要全局的禁止评论的话，在&lt;code&gt;config.toml&lt;/code&gt;中设置&lt;code&gt;disqusShortname = &amp;quot;&amp;quot;&lt;/code&gt;或者&lt;code&gt;disable_comments = true&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;

&lt;p&gt;要创建一个项目：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new  --kind project project/my-project-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后编辑新生成的&lt;code&gt;content/project/my-project-name.md&lt;/code&gt;文件。
在扉页将&lt;code&gt;external_link = &amp;quot;http://external-project.com&amp;quot;&lt;/code&gt;设置成已经存在的项目网址，
或者也可以手动在正文中介绍项目的情况。&lt;/p&gt;

&lt;h2 id=&#34;创建演讲&#34;&gt;创建演讲&lt;/h2&gt;

&lt;p&gt;要创建一个演讲：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new  --kind talk talk/my-talk-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用你的完整标题和内容填充新生成的&lt;code&gt;content/talk/my-talk-name.md&lt;/code&gt;文件。
你会注意到演讲的很多参数和出版物是类似的。&lt;/p&gt;

&lt;h2 id=&#34;创建幻灯片&#34;&gt;创建幻灯片&lt;/h2&gt;

&lt;p&gt;可以使用Markdown非常高效的创建幻灯片并通过你的网站分享给观众。
甚至还包括演讲者笔记。&lt;/p&gt;

&lt;p&gt;查看&lt;a href=&#34;https://themes.gohugo.io//theme/academic/slides/example-slides#/&#34; target=&#34;_blank&#34;&gt;slides demo&lt;/a&gt;
——尽管你可以注意到这个幻灯片是由Hugo团队制作的，并且他们缩减了一些功能。
运行&lt;code&gt;themes/academic/exampleSite/&lt;/code&gt;下的示例站点以查看完整的包含演讲者笔记的示例。&lt;/p&gt;

&lt;p&gt;查看&lt;code&gt;themes/academic/exampleSite/content/slides/example-slides.md&lt;/code&gt;内的&lt;code&gt;example slide deck&lt;/code&gt;以开始学习。&lt;/p&gt;

&lt;p&gt;在演讲/出版物页面使用&lt;code&gt;url_slides&lt;/code&gt;参数来关联到幻灯片。
比如，&lt;code&gt;url_slides = &amp;quot;slides/example-slides&amp;quot;&lt;/code&gt;可以关联到上面的示例站点。
在&lt;a href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/exampleSite/content/talk/example/index.md&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;可以看到包含&lt;code&gt;url_slides&lt;/code&gt;的完整扉页的示例。&lt;/p&gt;

&lt;h2 id=&#34;创建课程或文档&#34;&gt;创建课程或文档&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;文档&lt;/em&gt; 是用来&lt;strong&gt;分享知识&lt;/strong&gt;的。常见例子包括在线课程、教程、软件文档以及知识库。&lt;/p&gt;

&lt;p&gt;你现在阅读的这个页面(不是我翻译之后的这个)就是用_文档_的方式来展现Academic相关的。
同样，这里也有一个&lt;a href=&#34;https://themes.gohugo.io//theme/academic/tutorial/&#34; target=&#34;_blank&#34;&gt;在线课程&lt;/a&gt;的例子。&lt;/p&gt;

&lt;p&gt;查看&lt;code&gt;themes/academic/exampleSite/content/tutorial/&lt;/code&gt;的示例以学习如何开始。&lt;/p&gt;

&lt;p&gt;如果你是一名使用R语言的数据分析师/数据科学家(e.g. RStudio and RMarkdown)，我们推荐你阅读&lt;a href=&#34;https://github.com/sourcethemes/project-kickstart-r&#34; target=&#34;_blank&#34;&gt;R boilerplate project on GitHub&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;创建小部件页面&#34;&gt;创建小部件页面&lt;/h2&gt;

&lt;p&gt;你是否想利用Academic的小部件系统，创建一个和Academic主页类似的页面？&lt;/p&gt;

&lt;p&gt;在你的&lt;code&gt;content&lt;/code&gt;文件夹下创建一个新的，以你的页面命名的文件夹。在这个例子中我们将创建&lt;code&gt;content/tutorials/&lt;/code&gt;文件夹以创建我们的tutorials页。&lt;/p&gt;

&lt;p&gt;在新建的&lt;code&gt;content/tutorials/&lt;/code&gt;文件夹下创建一个名为&lt;code&gt;_index.md&lt;/code&gt;的文件，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;+++
title = &amp;quot;Tutorials&amp;quot;  # Add a page title.
date = 2017-01-01T00:00:00  # Add today&#39;s date.
widgets = true  # Page type is a Widget Page.
summary = &amp;quot;&amp;quot;  # Add a page description.
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将你的小部件放入&lt;code&gt;content/tutorials/&lt;/code&gt;文件夹，可以通过复制&lt;code&gt;content/home/&lt;/code&gt;下的小部件或者从&lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/home&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;上下载来实现。&lt;/p&gt;

&lt;h2 id=&#34;创建其他页面-e-g-简历&#34;&gt;创建其他页面(e.g. 简历)&lt;/h2&gt;

&lt;p&gt;其他类型内容的话，可以创建自己的自定义页面。
例如，我们在&lt;code&gt;content&lt;/code&gt;文件夹下创建一个&lt;code&gt;cv.md&lt;/code&gt;简历页面。复制任意一个文章的扉页，根据需要进行调整，然后在下面编辑Markdown内容。
再之后，您可以使用&lt;code&gt;[My CV]{&lt;/code&gt;&lt;code&gt;{&amp;lt; ref &amp;quot;cv.md&amp;quot; &amp;gt;}}&lt;/code&gt;代码将简历添加到任何现有页面的内容上。&lt;/p&gt;

&lt;p&gt;或者，在上面的例子中，我们可以使用简历的PDF文件。为此，在&lt;code&gt;static&lt;/code&gt;文件夹中创建名为&lt;code&gt;files&lt;/code&gt;的文件夹，并将名为&lt;code&gt;cv.pdf&lt;/code&gt;的PDF文件移动到该位置。
然后可以使用以下代码将PDF文件链接到你的任意内容中：&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% staticref &amp;quot;files/cv.pdf&amp;quot; %}}&lt;/code&gt;&lt;code&gt;下载我的简历&lt;/code&gt;&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% /staticref %}}&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;管理列表页&#34;&gt;管理列表页&lt;/h2&gt;

&lt;p&gt;档案(archive，我理解的就是列表)页或者说节点页，是列出你所有内容的特殊页面。
博客文章、出版物、演讲都会有列表页。
如果存在一个小部件放不下的内容的话，主页上的小部件会自动链接到列表页。
因此，如果你没有足够多的内容的话你可能不会看到自动生成的链接——
不过你也可以在文章中用一般的Markdown链接格式，手动的链接他们。&lt;/p&gt;

&lt;p&gt;你可以通过将以下&lt;code&gt;_index.md&lt;/code&gt;文件从示例站点复制到你的&lt;code&gt;content/&lt;/code&gt;文件夹中的相同位置，来编辑标题并添加自己的内容（比如简介）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/themes/academic/exampleSite/content/post/_index.md
/themes/academic/exampleSite/content/publication/_index.md
/themes/academic/exampleSite/content/talk/_index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后，根据需要编辑每个&lt;code&gt;_index.md&lt;/code&gt;中的&lt;code&gt;title&lt;/code&gt;参数，并在扉页之后添加任何内容。
你可能注意到&lt;code&gt;_index.md&lt;/code&gt;文件略有不同，其中一些具有可用于关联内容类型的特殊选项。
例如，&lt;code&gt;publication/_index.md&lt;/code&gt;包含用于设置出版物列表页面上显示的列表的引用样式的选项。&lt;/p&gt;

&lt;h2 id=&#34;移除内容&#34;&gt;移除内容&lt;/h2&gt;

&lt;p&gt;通常来说，要移除任意内容，简单的从你的&lt;code&gt;content/post&lt;/code&gt;、&lt;code&gt;content/publication&lt;/code&gt;、&lt;code&gt;content/project&lt;/code&gt;或者&lt;code&gt;content/talk&lt;/code&gt;文件夹中删除对应页面文件即可。&lt;/p&gt;

&lt;h2 id=&#34;查看站点更新&#34;&gt;查看站点更新&lt;/h2&gt;

&lt;p&gt;在你对站点做出修改之后，你可以通过执行&lt;code&gt;hugo server&lt;/code&gt;并在浏览器中打开&lt;a href=&#34;http://localhost:1313/&#34; target=&#34;_blank&#34;&gt;http://localhost:1313/&lt;/a&gt; 来看到效果。&lt;/p&gt;

&lt;h2 id=&#34;部署站点&#34;&gt;部署站点&lt;/h2&gt;

&lt;p&gt;最后，你可以&lt;a href=&#34;https://sourcethemes.com/academic/docs/deployment/&#34; target=&#34;_blank&#34;&gt;部署你的站点&lt;/a&gt;了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tmux in 10 minutes</title>
      <link>https://szthanatos.github.io/post/tmux/</link>
      <pubDate>Tue, 01 Jan 2019 12:27:05 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/tmux/</guid>
      <description>

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#简介&#34;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装tmux&#34;&gt;安装tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#基础概念&#34;&gt;基础概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#配置&#34;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#常用控制&#34;&gt;常用控制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#会话&#34;&gt;会话&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#窗口&#34;&gt;窗口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#窗格&#34;&gt;窗格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tpm插件&#34;&gt;tpm插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#鼠标操作&#34;&gt;鼠标操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Tmux是一个终端复用软件，默认的Linux终端一个会话只能干一件事，有了tmux就能在一个窗口同时管理多个前/后台程序了。&lt;/p&gt;

&lt;h2 id=&#34;安装tmux&#34;&gt;安装tmux&lt;/h2&gt;

&lt;p&gt;基础软件，跳过&lt;/p&gt;

&lt;h2 id=&#34;基础概念&#34;&gt;基础概念&lt;/h2&gt;

&lt;p&gt;见图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://szthanatos.github.io/img/tmux.jpg&#34; alt=&#34;Tmux页面&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Session&lt;/code&gt;：输入tmux后就创建了一个会话，一个会话是一组窗体的集合；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Window&lt;/code&gt;：会话中一个可见的窗口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pane&lt;/code&gt;: 一个窗口可以分成多个窗格；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用win10任务视图(Win+Tab调出)的概念来类比，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Pane&lt;/code&gt;就是一个个应用窗口，在一个桌面上可以同时开多个(但是不能堆叠，)；&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Window&lt;/code&gt;就是一组组桌面，同一时间你只能看到一个桌面&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Session&lt;/code&gt;就是一个用户，区别就是win10同一个账户只能登陆一次，tmux里相当于一个用户登陆N次。&lt;/p&gt;

&lt;p&gt;为了控制这些元素，tmux分为三种模式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;控制模式&lt;/code&gt;: （按下或者按住前缀(tmux-prefix)，默认ctrl+b, 下文用&lt;code&gt;※ + X&lt;/code&gt;表示按下前缀之后按X，&lt;code&gt;※※ + Y&lt;/code&gt;表示按住前缀的同时按Y）相当于各种热键；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;命令模式&lt;/code&gt;: （输入tmux 后接命令，或者在tmux内输入&lt;code&gt;※ + shift + :&lt;/code&gt;）也就是输入命令，但是执行的不是系统命令，而是tmux自身的命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一般模式&lt;/code&gt;:  正常打字；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;

&lt;p&gt;和zsh一样，得先配置才能用的舒坦。下面是我个人用的配置文件。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl+b&lt;/code&gt;被我替换为&lt;code&gt;Ctrl+x&lt;/code&gt;，横竖分割窗格我分别设置为&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;\&lt;/code&gt;，刚好一横一竖嘛，并且启用了tpm管理tmux插件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;#-- base --#
# (可选)设置zsh为默认shell
set -g default-shell /bin/zsh 

# 开启鼠标切换窗格，按住shift复制粘贴
set -g mouse on 

#-- bindkeys --#
# 以下3行设置ctrl+x代替ctrl+b的快捷键
set -g prefix C-x 
unbind C-b
bind C-x send-prefix

# 设置tmux-prefix + \垂直分割窗格
unbind %
bind \ split-window -h 
# 设置tmux-prefix + -水平分割窗格
unbind &#39;&amp;quot;&#39;
bind - split-window -v 

# 设置ctrl+vim方式切换窗格
bind -n C-h select-pane -L 
bind -n C-j select-pane -D 
bind -n C-k select-pane -U 
bind -n C-l select-pane -R 

# plugins
# tmux plugin manager 插件管理
set -g @plugin &#39;tmux-plugins/tpm&#39; 
set -g @plugin &#39;tmux-plugins/tmux-sensible&#39;
# 保存布局插件，tmux-prefix + ctrl+s/tmux-prefix + ctrl+r保存/恢复
set -g @plugin &#39;tmux-plugins/tmux-resurrect&#39; 
# 自动保存插件
set -g @plugin &#39;tmux-plugins/tmux-continuum&#39; 

# tmux-resurrect配置
# 恢复shell的历史记录,只有无前台任务运行的窗格 才能被保存
set -g @resurrect-save-bash-history &#39;on&#39; 
# 恢复窗格内容,目前使用该功能时，请确保tmux的default-command没有包含&amp;amp;&amp;amp; 或者||操作符，
# 否则将导致bug。（查看default-command的值，请使用命令tmux show -g default-command。）
set -g @resurrect-capture-pane-contents &#39;on&#39; 
# 恢复vim会话
set -g @resurrect-strategy-vim &#39;session&#39; 

# set -g @resurrect-save &#39;S&#39;
# set -g @resurrect-restore &#39;R&#39;

# tmux-continuum配置
# 开启自动恢复
set -g @continuum-restore &#39;on&#39; 
# 设置备份间隔（分钟，0为不自动备份）
set -g @continuum-save-interval &#39;240&#39; 
# 状态栏查看备份状态
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
set -g status-right &#39;Continuum status: #{continuum_status}&#39; 

run &#39;/etc/.tmux/plugins/tpm/tpm&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体配置步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;编辑&lt;code&gt;.tmux.conf&lt;/code&gt;文件放到你的根目录下；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git clone https://github.com/tmux-plugins/tpm /etc/.tmux/plugins/tpm&lt;/code&gt;将tpm安装到&lt;code&gt;etc&lt;/code&gt;目录下
(或者随你喜欢，我是个人和root共用一套配置，所以放个公共的地)；&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;tmux source-file ~/.tmux.conf&lt;/code&gt;载入配置；&lt;/li&gt;
&lt;li&gt;进入tmux，输入&lt;code&gt;※ + U&lt;/code&gt;查看tpm插件更新，弹出页面默认打开命令模式，直接输入&lt;code&gt;all&lt;/code&gt;完成更新；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;常用控制&#34;&gt;常用控制&lt;/h2&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;注意，下列所有快捷键区分大小写。&lt;/p&gt;

&lt;/div&gt;


&lt;h3 id=&#34;会话&#34;&gt;会话&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;※ + d&lt;/td&gt;
&lt;td&gt;休眠&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + s&lt;/td&gt;
&lt;td&gt;以菜单方式显示和选择会话&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + L&lt;/td&gt;
&lt;td&gt;切换回上一次的会话&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;窗口&#34;&gt;窗口&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;※ + c&lt;/td&gt;
&lt;td&gt;创建新窗口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + n&lt;/td&gt;
&lt;td&gt;选择下一个窗口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + p&lt;/td&gt;
&lt;td&gt;选择前一个窗口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + l&lt;/td&gt;
&lt;td&gt;最近一次活跃窗口之间进行切换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + 0~9&lt;/td&gt;
&lt;td&gt;选择几号窗口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + ,&lt;/td&gt;
&lt;td&gt;重命名窗口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + .&lt;/td&gt;
&lt;td&gt;更改窗口的编号，但只能更改成未使用的编号，所以要交换窗口的话，得多次更改进行交换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + &amp;amp;&lt;/td&gt;
&lt;td&gt;关闭窗口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + w&lt;/td&gt;
&lt;td&gt;以菜单方式显示及选择窗口&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + f&lt;/td&gt;
&lt;td&gt;在所有窗口中查找内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;窗格&#34;&gt;窗格&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;※ + z&lt;/td&gt;
&lt;td&gt;最大化/还原当前窗格&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + &amp;ldquo;&lt;/td&gt;
&lt;td&gt;模向分隔窗格，&lt;strong&gt;替换为了&lt;code&gt;-&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + %&lt;/td&gt;
&lt;td&gt;纵向分隔窗格，&lt;strong&gt;替换为了&lt;code&gt;\&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + o&lt;/td&gt;
&lt;td&gt;跳到下一个分隔窗格&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + x&lt;/td&gt;
&lt;td&gt;关闭窗格&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + ;&lt;/td&gt;
&lt;td&gt;切换到最后一个使用的窗格&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + ↑/↓/←/→&lt;/td&gt;
&lt;td&gt;切换到上/下/左/右的窗格&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※※ + h/j/k/l&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;自定义配置，vim方式切换窗格&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + q&lt;/td&gt;
&lt;td&gt;显示窗格编号，并在右上角显示窗格的长宽&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + 空格键&lt;/td&gt;
&lt;td&gt;自动排布窗格，可多次执行尝试多种布局&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;tpm插件&#34;&gt;tpm插件&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;※ + S&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;自定义配置，保存当前布局&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;※ + R&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;自定义配置，还原保存的布局&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;鼠标操作&#34;&gt;鼠标操作&lt;/h2&gt;

&lt;p&gt;鼠标按住窗格的分割线可以修改窗格大小；&lt;/p&gt;

&lt;p&gt;如果你用&lt;code&gt;wsltty&lt;/code&gt;或者其他软件，发现右键/中键失效，记得按住修饰键(比如&lt;code&gt;Shift&lt;/code&gt;)再试。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Tips</title>
      <link>https://szthanatos.github.io/post/git_tips/</link>
      <pubDate>Fri, 14 Dec 2018 09:35:32 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/git_tips/</guid>
      <description>

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#deploy-key-ssh-key-github&#34;&gt;Deploy key/SSH key(github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#更换git协议&#34;&gt;更换git协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#强制覆盖本地文件&#34;&gt;强制覆盖本地文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#撤销修改&#34;&gt;撤销修改&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#add之前撤销&#34;&gt;add之前撤销&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commit之前撤销&#34;&gt;commit之前撤销&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#push之前撤销&#34;&gt;push之前撤销&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;deploy-key-ssh-key-github&#34;&gt;Deploy key/SSH key(github)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Deploy key&lt;/code&gt;是在&lt;code&gt;项目主页&lt;/code&gt;-&lt;code&gt;setting&lt;/code&gt;-&lt;code&gt;Delpoy keys&lt;/code&gt;下进行添加，如果勾选&lt;code&gt;Allow write access&lt;/code&gt;，则相当于具有对这个项目的读写权限(否则只能&lt;code&gt;clone&lt;/code&gt;不能&lt;code&gt;push&lt;/code&gt;)。&lt;strong&gt;作用范围是这个项目。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SSH key&lt;/code&gt;是在你&lt;code&gt;个人主页&lt;/code&gt;-&lt;code&gt;Settings&lt;/code&gt;-&lt;code&gt;SSH and GPG keys&lt;/code&gt;下进行添加。&lt;strong&gt;作用范围是你的账户下的所有项目。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;同一个&lt;code&gt;公钥&lt;/code&gt;，只能作为整个账户的&lt;code&gt;SSH key&lt;/code&gt;，或者&lt;strong&gt;一个项目&lt;/strong&gt;的&lt;code&gt;Deploy key&lt;/code&gt;。想为一台机器授予多个项目的读写权限的话，需要通过&lt;code&gt;ssh-keygen&lt;/code&gt;生成多个密钥，分别作为不同项目的&lt;code&gt;Deploy key&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;更换git协议&#34;&gt;更换git协议&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;http&lt;/code&gt;/&lt;code&gt;https&lt;/code&gt;协议连接仓库相比&lt;code&gt;ssh&lt;/code&gt;即不够安全，也会存在&lt;code&gt;push&lt;/code&gt;的时候必须输入用户名密码的问题。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;git remote -v&lt;/code&gt;可以查看项目使用的协议。&lt;/p&gt;

&lt;p&gt;如果是新建的项目，推荐在一开始就使用&lt;code&gt;git@github.com:{USER}/{PROJECT}.git&lt;/code&gt;进行&lt;code&gt;clone&lt;/code&gt;。这样默认都是用&lt;code&gt;ssh&lt;/code&gt;了。&lt;/p&gt;

&lt;p&gt;如果是已有项目，使用&lt;code&gt;git remote set-url {repository} {url}&lt;/code&gt;更改。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote -v
origin  https://github.com/abc/bcd.git (fetch)
origin  https://github.com/abc/bcd.git (push)

$ git remote set-url origin git@github.com:abc/bcd.git

$ git remote -v
origin  git@github.com:abc/bcd.git (fetch)
origin  git@github.com:abc/bcd.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;强制覆盖本地文件&#34;&gt;强制覆盖本地文件&lt;/h2&gt;

&lt;p&gt;啥都别说了，直接重来吧：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch --all  
git reset --hard origin/master 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;撤销修改&#34;&gt;撤销修改&lt;/h2&gt;

&lt;h3 id=&#34;add之前撤销&#34;&gt;add之前撤销&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 单个文件
git checkout FileName

# 所有文件
git checkout .
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;commit之前撤销&#34;&gt;commit之前撤销&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 取消暂存
git reset HEAD FileName

# 撤销修改
git checkout FileName
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;push之前撤销&#34;&gt;push之前撤销&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git reset [--hard|soft|mixed] [commit|HEAD]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Academic实现Github Page个人博客</title>
      <link>https://szthanatos.github.io/post/academic/academic_in_practice/</link>
      <pubDate>Sun, 09 Dec 2018 16:34:42 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/academic/academic_in_practice/</guid>
      <description>

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#hugo-安装-更新&#34;&gt;Hugo 安装/更新&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装-更新&#34;&gt;安装/更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#常用命令&#34;&gt;常用命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#academic-安装-更新&#34;&gt;Academic 安装/更新&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#通过netlify&#34;&gt;通过Netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#通过git&#34;&gt;通过Git&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#自动更新&#34;&gt;自动更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#手动更新&#34;&gt;手动更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#部署到github-pages&#34;&gt;部署到Github Pages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#原理&#34;&gt;原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#官方教程-缩减版&#34;&gt;官方教程(缩减版)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#脚本&#34;&gt;脚本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#个性化配置&#34;&gt;个性化配置&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#config-toml主要配置项解释&#34;&gt;config.toml主要配置项解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修改网站logo&#34;&gt;修改网站logo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#给文章添加精选图&#34;&gt;给文章添加精选图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#给文章添加头部背景&#34;&gt;给文章添加头部背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#目录&#34;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#注意-警告标识&#34;&gt;注意/警告标识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#消除短代码效果&#34;&gt;消除短代码效果&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#单行代码&#34;&gt;单行代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#代码块&#34;&gt;代码块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修改模板&#34;&gt;修改模板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;hugo-安装-更新&#34;&gt;Hugo 安装/更新&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;是使用&lt;code&gt;Go&lt;/code&gt;语言开发的静态站点生成器。不过无需准备&lt;code&gt;Go&lt;/code&gt;语言环境，可以直接通过二进制编译包进行跨平台部署。&lt;/p&gt;

&lt;p&gt;以下均以Ubuntu18.0为例。&lt;/p&gt;

&lt;h3 id=&#34;安装-更新&#34;&gt;安装/更新&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;前往&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34; target=&#34;_blank&#34;&gt;Github页面&lt;/a&gt;下载最新版本，这里我们下载&lt;code&gt;hugo_0.52_Linux-64bit.deb&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;使用命令&lt;code&gt;dpkg -i hugo_0.52_Linux-64bit.deb&lt;/code&gt; 安装hugo;&lt;/li&gt;
&lt;li&gt;更新即重复上面两步，覆盖安装即可;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/strong&gt;： 编译项目生成静态网站，默认位置在项目的&lt;code&gt;public&lt;/code&gt;目录下&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;hugo server&lt;/code&gt;&lt;/strong&gt;： 启动你的网站服务，可以通过浏览器访问&lt;code&gt;http://127.0.0.1:1313/&lt;/code&gt;访问站点;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;hugo new {folder}/{name}.md&lt;/code&gt;&lt;/strong&gt;: 创建新文章，使用&lt;code&gt;markdown&lt;/code&gt;进行排版，一般默认放在&lt;code&gt;post&lt;/code&gt;文件夹下；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本没了，一般情况下用这三个命令就够了。&lt;/p&gt;

&lt;h2 id=&#34;academic-安装-更新&#34;&gt;Academic 安装/更新&lt;/h2&gt;

&lt;p&gt;Academic是一个Hugo主题，从名字就可以知道这个主题比较学院派，适合科研/学术人员发布个人信息/介绍科研项目，当然，拿来做个人博客也是没问题的。&lt;/p&gt;

&lt;h3 id=&#34;通过netlify&#34;&gt;通过Netlify&lt;/h3&gt;

&lt;p&gt;Academic推荐使用第三方博客管理平台&lt;a href=&#34;https://app.netlify.com/start/deploy?repository=https://github.com/sourcethemes/academic-kickstart&#34; target=&#34;_blank&#34;&gt;Netlify&lt;/a&gt;安装，如果你没有域名或者没想建站，只是想自己使用，那我建议不使用它的服务——请直接跳到下一部分，否则跟随网站引导完成安装;&lt;/p&gt;

&lt;h3 id=&#34;通过git&#34;&gt;通过Git&lt;/h3&gt;

&lt;h4 id=&#34;安装&#34;&gt;安装&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;通过git安装的话，首先建议你在GitHub上fork成你自己的项目，默认的话，通过&lt;code&gt;git clone https://github.com/sourcethemes/academic-kickstart.git My_Website&lt;/code&gt;将代码克隆到本地文件夹&lt;code&gt;My_Website&lt;/code&gt; &lt;em&gt;(当然，更推荐使用ssh协议，更安全，也免于push时输入密码，这里暂时按官方的来)&lt;/em&gt; ;&lt;/li&gt;
&lt;li&gt;进入文件夹，初始化项目：&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;，完成安装;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;自动更新&#34;&gt;自动更新&lt;/h4&gt;

&lt;p&gt;说是自动，还是需要手动执行一条命令：&lt;code&gt;git submodule update --remote --merge&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;这么做的前提条件是你是&lt;code&gt;install&lt;/code&gt;的，也就是&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;过的，而不是直接把&lt;code&gt;academic&lt;/code&gt;给clone到themes文件夹。&lt;/p&gt;

&lt;h4 id=&#34;手动更新&#34;&gt;手动更新&lt;/h4&gt;

&lt;p&gt;如果是clone到themes文件夹的话要这么更新：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd themes/academic&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;origin&lt;/code&gt;仓库重命名为&lt;code&gt;upstream&lt;/code&gt;：&lt;code&gt;git remote rename origin upstream&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;将更新下载到本地：&lt;code&gt;git fetch upstream&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;列出可用更新：&lt;code&gt;git log --pretty=oneline --abbrev-commit --decorate HEAD..upstream/master&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;更新：&lt;code&gt;git pull upstream&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;部署到github-pages&#34;&gt;部署到Github Pages&lt;/h2&gt;

&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;

&lt;p&gt;网上介绍的办法很多，但核心其实就一句：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将&lt;code&gt;hugo&lt;/code&gt;命令生成的&lt;code&gt;public&lt;/code&gt;文件夹上传到GitHub pages项目下&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public&lt;/code&gt;文件夹相当于编译完成的静态网站，你在本地打开其实就能看。换句话说，你每次手动将这个目录下的内容上传到你的GitHub page项目也是可以的。&lt;/p&gt;

&lt;p&gt;然后为了达到这个目的，Academic给出的做法是利用&lt;code&gt;git submodule&lt;/code&gt;将你的&lt;code&gt;GitHub page&lt;/code&gt;项目作为&lt;code&gt;My_Website&lt;/code&gt;项目的子模块存放到&lt;code&gt;public&lt;/code&gt;目录。那么当你更新你的文章之后，只提交&lt;code&gt;public&lt;/code&gt;文件夹内的变更到&lt;code&gt;GitHub page&lt;/code&gt;项目即可。&lt;/p&gt;

&lt;h3 id=&#34;官方教程-缩减版&#34;&gt;官方教程(缩减版)&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/deployment/#github-pages&#34; target=&#34;_blank&#34;&gt;原教程&lt;/a&gt;看这里；&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在GitHub上创建两个项目，一个是fork 的&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart.git&#34; target=&#34;_blank&#34;&gt;academic-kickstart&lt;/a&gt;，也就是你前面clone到本地的&lt;code&gt;My_Website&lt;/code&gt;，另一个即是以你用户名/组织名开头、以&lt;code&gt;.github.io&lt;/code&gt;结尾的GitHub page项目。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;My_Website&lt;/code&gt;目录下执行&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;将子模块更新到最新状态；&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;config.toml&lt;/code&gt;中的&lt;code&gt;baseurl&lt;/code&gt;设置为你的GitHub page地址；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;(实质)&lt;/strong&gt; 删除&lt;code&gt;public&lt;/code&gt;文件夹(如果有的话)，将GitHub page项目添加为子模块：&lt;code&gt;git submodule add -f -b master https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public&lt;/code&gt;;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;这时候你的&lt;code&gt;My_Website&lt;/code&gt;项目实际上有两个子模块：作为主题依赖的&lt;code&gt;themes/academic&lt;/code&gt;和作为网站的&lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt;；&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;有意思的是一般是子模块&lt;code&gt;themes/academic&lt;/code&gt;更新了之后，你更新主项目&lt;code&gt;My_Website&lt;/code&gt;的依赖；&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;而你更新主项目&lt;code&gt;My_Website&lt;/code&gt;的文章之后，再会手动的更新子模块&lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt;，刚好反过来。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;新增/编辑文章后，更新&lt;code&gt;academic-kickstart&lt;/code&gt;项目：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;Initial commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更新GitHub page项目：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo 
cd public
git add .
git commit -m &amp;quot;Build website&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;实际上只有第六步是更新GitHub page，每次重复执行这一部分就行(如果你不把文章保存到&lt;code&gt;academic-kickstart&lt;/code&gt;的话)。&lt;/p&gt;

&lt;h3 id=&#34;脚本&#34;&gt;脚本&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Hugo&lt;/code&gt;官方把上面步骤打包到了一个脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add .

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back up to the Project Root
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上我们干脆连第五步也放进去呗：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
# Receive args.
if [ $1 = &amp;quot;push&amp;quot; ]; then
    if [ $# -eq 1 ]; then
        TIME_NOW=$(date +%T\ %F)
        MSG=&amp;quot;Change something nobody knows at ${TIME_NOW}...&amp;quot;
        EDITED_FILE=&amp;quot;.&amp;quot;

    elif [ $# -eq 2 ]; then
        MSG=&amp;quot;$2&amp;quot;
        EDITED_FILE=&amp;quot;.&amp;quot;

    elif [ $# -gt 2 ]; then
        MSG=&amp;quot;$2&amp;quot;
        shift 2
        EDITED_FILE=&amp;quot;$*&amp;quot;

    else
        echo &amp;quot;WTF?&amp;quot;

    fi

    echo &amp;quot;\033[0;32m
    ---------------------------
    Deploying to GitHub Page...
    ---------------------------
    \033[0m&amp;quot;

    # Build the project.
    hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`

    # Go To Public folder
    cd public

    # Add changes to git.
    git add .

    # Commit changes.
    git commit -m &amp;quot;$MSG&amp;quot;

    # Push source and build repos.
    git push origin master

    # Come Back up to the Project Root
    cd ..

    echo &amp;quot;\033[0;32m
    -----------------------------
    Updating content to GitHub...
    -----------------------------
    \033[0m&amp;quot;

    # Add changes to git.
    git add $EDITED_FILE

    # Commit changes.
    git commit -m &amp;quot;$MSG&amp;quot;

    # Push source and build repos.
    git push origin master

elif [ $1 = &amp;quot;pull&amp;quot; ]; then

    # Update main repo.
    git pull

    # Update submodule.
    git submodule update

    echo &amp;quot;Synchronize finish.&amp;quot;

else
    echo &amp;quot;Determine What you wanna do.&amp;quot;
    
fi

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将脚本保存为&lt;code&gt;deploy.sh&lt;/code&gt;，放到项目根目录下，完成修改后执行&lt;code&gt;./deploy.sh&lt;/code&gt; + &lt;code&gt;pull&lt;/code&gt;/&lt;code&gt;push&lt;/code&gt;一键从服务器同步/提交+部署。&lt;/p&gt;

&lt;p&gt;参数的第一个是你要执行的动作，从远程服务器down到本地的话就是&lt;code&gt;./deploy.sh pull&lt;/code&gt;，不用接别的。&lt;/p&gt;

&lt;p&gt;如果是要将更新上传到服务器并部署，那就执行&lt;code&gt;./deploy.sh push&lt;/code&gt; + commit message，提交消息可以不写(但最好还是写一下)：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./deploy.sh push &amp;quot;{Your optional commit message}&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果修改了多个文件，只想提交其中的一部分文件以保持commit的纯净，那就在mesaage后面附加你要提交的文件路径(不超过10个&amp;hellip;)：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./deploy.sh push &amp;quot;{Your optional commit message}&amp;quot; path1 path2...&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;个性化配置&#34;&gt;个性化配置&lt;/h2&gt;

&lt;p&gt;项目目录结构大体如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content目录&lt;/code&gt;： 网站内容，&lt;code&gt;home&lt;/code&gt;是你的主页的小控件，&lt;code&gt;post&lt;/code&gt;是默认文章存放位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public目录&lt;/code&gt;： 生成的静态页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resouces目录&lt;/code&gt;： JS资源存放位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static目录&lt;/code&gt;： 静态资源存放位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes目录&lt;/code&gt;： 主题文件所在目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt;: 全局配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-toml主要配置项解释&#34;&gt;config.toml主要配置项解释&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;baseurl&lt;/td&gt;
&lt;td&gt;你的站点的url，不设置这个你的文章/资源可能相互引用不到&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;网站标题&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;defaultContentLanguage&lt;/td&gt;
&lt;td&gt;默认语言，中文的话填&lt;code&gt;zh&lt;/code&gt;，在文件末尾还有一处配置要同时修改才行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hasCJKLanguage&lt;/td&gt;
&lt;td&gt;是否有中/日/韩语&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;defaultContentLanguageInSubdir&lt;/td&gt;
&lt;td&gt;目录是否允许用默认语言，&lt;code&gt;true&lt;/code&gt;就对了&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;highlight_languages&lt;/td&gt;
&lt;td&gt;语法高亮，支持的语言可以去&lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;highlight.js&lt;/a&gt;查到&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;[[menu.main]]&lt;/td&gt;
&lt;td&gt;这部分是你主页上标题栏显示的内容，&lt;code&gt;url&lt;/code&gt;默认和你&lt;code&gt;content/home&lt;/code&gt;下的文件名对应&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Languages&lt;/td&gt;
&lt;td&gt;添加中文支持的话，把&lt;code&gt;[languages.zh]&lt;/code&gt;部分解除注释，&lt;code&gt;languageCode&lt;/code&gt;写&lt;code&gt;&amp;quot;zh-cn&amp;quot;&lt;/code&gt;，添加其他语种的话，相同格式再写一组&lt;code&gt;[languages.XX]&lt;/code&gt;即可，支持的语言代码可以在&lt;code&gt;themes\academic\i18n&lt;/code&gt;查看&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;修改网站logo&#34;&gt;修改网站logo&lt;/h3&gt;

&lt;p&gt;默认的logo是Academic的蓝色学位帽，想替换的话将你想用的logo保存为
&lt;code&gt;icon.png&lt;/code&gt;(默认32*32像素，大了也没关系)
和&lt;code&gt;icon-192.png&lt;/code&gt;(192*192像素)，并放到项目的&lt;code&gt;static/img&lt;/code&gt;目录下&lt;/p&gt;

&lt;h3 id=&#34;给文章添加精选图&#34;&gt;给文章添加精选图&lt;/h3&gt;

&lt;p&gt;这个图片只能添加一个，名字必须是&lt;code&gt;featured.*&lt;/code&gt;(后缀jpg/png都行)，而且必须和文章放在同一个文件夹下。&lt;/p&gt;

&lt;p&gt;所以一般做法是把文章&lt;code&gt;aaa.md&lt;/code&gt;改名为&lt;code&gt;index.md&lt;/code&gt;并新建一个&lt;code&gt;aaa&lt;/code&gt;目录，再和&lt;code&gt;featured.png&lt;/code&gt;图片一起扔进去。&lt;/p&gt;

&lt;p&gt;显示的效果是在文章列表页，文章右侧有一个缩略图；打开文章，标题默认会居左，右边是精选图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://szthanatos.github.io/img/featured_image_example.png&#34; alt=&#34;example&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;给文章添加头部背景&#34;&gt;给文章添加头部背景&lt;/h3&gt;

&lt;p&gt;这个是文章头部的横跨整个页面的大图，也就是文章头部这个黑底白字的大图。&lt;/p&gt;

&lt;p&gt;这个的图片可以放到&lt;code&gt;static/img&lt;/code&gt;目录下，不过需要在你文件的&lt;code&gt;+++&lt;/code&gt;的部分添加如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[header]
  image = &amp;quot;img名称&amp;quot;
  caption = &amp;quot;标题说明&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;顺便一提，文章内引用&lt;code&gt;static/img&lt;/code&gt;下存储的图像的话，路径大致如此&lt;code&gt;![example](/img/image_abc.png)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% toc %}}&lt;/code&gt;加在文章的任何你想要的地方以自动生成目录&lt;/p&gt;

&lt;h3 id=&#34;注意-警告标识&#34;&gt;注意/警告标识&lt;/h3&gt;

&lt;p&gt;被&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% alert note %}}&lt;/code&gt;和&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% /alert %}}&lt;/code&gt;包裹起来的内容即为注意项：&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;注意内容blabla&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;被&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% alert warning %}}&lt;/code&gt;和&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% /alert %}}&lt;/code&gt;包裹起来的内容即为警告项：&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;警告内容blabla&lt;/p&gt;

&lt;/div&gt;


&lt;h3 id=&#34;消除短代码效果&#34;&gt;消除短代码效果&lt;/h3&gt;

&lt;p&gt;Hugo是基于Go的Template，所以所有以&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% %}}&lt;/code&gt;或者&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{&amp;lt; &amp;gt;}}&lt;/code&gt;包裹的内容都会被解析为短代码块，而无法直接显示其代码。
那么我是怎么解决的呢，分情况：&lt;/p&gt;

&lt;h4 id=&#34;单行代码&#34;&gt;单行代码&lt;/h4&gt;

&lt;p&gt;你看到的&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{% toc %}}&lt;/code&gt;实际是由&lt;code&gt;`{`&lt;/code&gt;和&lt;code&gt;`{% toc %}}`&lt;/code&gt;组成的。&lt;/p&gt;

&lt;p&gt;而上面打出的&lt;code&gt;`&lt;/code&gt;其实是&lt;code&gt;双反引号 空格 反引号 空格 双反引号&lt;/code&gt;，就不再嵌套了。。。&lt;/p&gt;

&lt;h4 id=&#34;代码块&#34;&gt;代码块&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{{&amp;lt; figure library=&amp;quot;1&amp;quot; src=&amp;quot;image.jpg&amp;quot; title=&amp;quot;A caption&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的本质是将&amp;lt;&amp;gt;或者%%内的内容用/**/注释掉：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{&amp;lt;/* figure library=&amp;quot;1&amp;quot; src=&amp;quot;image.jpg&amp;quot; title=&amp;quot;A caption&amp;quot; */&amp;gt;}}&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;谁知道Markdown的代码块怎么嵌套&amp;hellip;
比如外层一个markdown的代码块，
里面要显示包含反引号格式的python代码块&amp;hellip;&lt;/p&gt;

&lt;/div&gt;


&lt;h3 id=&#34;修改模板&#34;&gt;修改模板&lt;/h3&gt;

&lt;p&gt;比如你看到我每个文章结尾都有一个&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CC4.0协议&lt;/code&gt;&lt;/a&gt;的标志，这个肯定不是一篇篇手动添加的，实际上我是自己写了一个License的Widget，插入到文章的模板里面实现的。&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;不要直接修改&lt;code&gt;theme&lt;/code&gt;里面的内容，否则更新主题的时候会非常尴尬。&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;正确的做法是在项目根目录建立&lt;code&gt;layouts&lt;/code&gt;文件夹，将你想修改的模板从&lt;code&gt;themes/academic/layouts&lt;/code&gt;拷贝过来再修改。&lt;/p&gt;

&lt;p&gt;现在Academic主题的layouts大概是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_default&lt;/code&gt;: 默认文章相关模板；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: 文档相关模板;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;home&lt;/code&gt;: 主页相关模板;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partials&lt;/code&gt;: 小部件相关模板，页面头部/脚注/摘要等等的都在这;

&lt;ul&gt;
&lt;li&gt;额外的有一个&lt;code&gt;widgets&lt;/code&gt;文件夹，里面是主页的widget的模板；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project&lt;/code&gt;: 项目相关模板;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publication&lt;/code&gt;: 出版物相关模板;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;section&lt;/code&gt;: 摘要相关模板;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shortcodes&lt;/code&gt;: Academic提供的额外效果模板，你写的所有&lt;code&gt;{&lt;/code&gt;&lt;code&gt;{%%}}&lt;/code&gt;的内容效果都出自这里;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slides&lt;/code&gt;: 幻灯片相关模板;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;talk&lt;/code&gt;: 宣讲相关模板;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;继续用我自己做例子，我新建了&lt;code&gt;layouts/partials/license.html&lt;/code&gt;，把CC协议相关内容存了进去，
接着，复制主题目录下的&lt;code&gt;layouts/_default/single.html&lt;/code&gt;到对应位置，在合适地方插入一句&lt;code&gt;{{ partial &amp;quot;license.html&amp;quot; . }}&lt;/code&gt;，表明我要在这里使用名为&lt;code&gt;license.html&lt;/code&gt;的&lt;code&gt;partial&lt;/code&gt;。
再之后就是你们看到的效果了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hbase表设计风格指南</title>
      <link>https://szthanatos.github.io/post/hbase_design/</link>
      <pubDate>Sun, 09 Dec 2018 16:19:27 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/hbase_design/</guid>
      <description>

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#简介&#34;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#一般原则&#34;&gt;一般原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#命名空间-namespace&#34;&gt;命名空间(NameSpace)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#表-table&#34;&gt;表(Table)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-1&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-1&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#行键-rowkey&#34;&gt;行键(Rowkey)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-2&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-2&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#注意&#34;&gt;注意&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#慎重将时间戳直接放入行键中&#34;&gt;慎重将时间戳直接放入行键中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#权衡hash和string的效果&#34;&gt;权衡hash和string的效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列族-columnfamily&#34;&gt;列族(ColumnFamily)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-3&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-3&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#注意-1&#34;&gt;注意&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#列族的数量应控制在1-3个&#34;&gt;列族的数量应控制在1-3个&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列-qualifier&#34;&gt;列(Qualifier)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#命名规范-4&#34;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#示例-4&#34;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;本指南是对在HBase进行字段设计而提供的指导性准则和建议。总体标准、设计方式参照&lt;a href=&#34;https://github.com/google/styleguide&#34; target=&#34;_blank&#34;&gt;Google 开源项目风格指南&lt;/a&gt;以及现有项目经验。所有条目均为个人总结，&lt;strong&gt;并不是一份官方标准性质的指南&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;HBase是建立在Hadoop文件系统（HDFS）之上的分布式、面向列的数据库。&lt;/p&gt;

&lt;h2 id=&#34;一般原则&#34;&gt;一般原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;无论是表或者是列或者其他，都应该使用名词或者动宾短语以代表一类对象;&lt;/li&gt;
&lt;li&gt;尽量避免使用(尤其是单独使用)例如&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;join&lt;/code&gt;、&lt;code&gt;select&lt;/code&gt;等常见保留词;&lt;/li&gt;
&lt;li&gt;HBase在性能和效率上更擅长处理“高而瘦”的表，而非“矮而胖”的表——以Excel类比，HBase应该尽可能设计成只有很少的列(瘦)而有非常多行(高)的模式;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;命名空间-namespace&#34;&gt;命名空间(NameSpace)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字的组合形式，其中，单词必须大写，并且首字符必须为英文字符，不能是数字;&lt;/li&gt;
&lt;li&gt;不建议用连接符（下划线）拼接多个单词，简单语义的可采用单个单词，复杂语义的可采用多个单词的首字母拼接;&lt;/li&gt;
&lt;li&gt;长度尽量限制在4~8字符之间;&lt;/li&gt;
&lt;li&gt;命名空间一般可与项目名称、组织机构名称等保持一致;&lt;/li&gt;
&lt;li&gt;一般情况下如果不指定命名空间，表会被放在默认(default)命名空间下;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ZKR
XJ917 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;表-table&#34;&gt;表(Table)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-1&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字、连接符（_）的组合形式，其中，单词必须大写，并且首字符必须为英文字符，可用连接符拼接多个单词;&lt;/li&gt;
&lt;li&gt;长度尽量限制在8~16字符之间;&lt;/li&gt;
&lt;li&gt;尽量采用具有明确意义的英文单词，而不建议采用汉字的拼音字母或者拼音首字母组合;&lt;/li&gt;
&lt;li&gt;无需以&lt;code&gt;TABLE&lt;/code&gt;结尾;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-1&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;USER_INFO
WEIBO_USER_FANS
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;行键-rowkey&#34;&gt;行键(Rowkey)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-2&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字、非转义字符组合形式，不要求大小写，但首字符必须是英文字符或数字;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-2&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;123456-654321
dftf3a3l3rv3qr
s.taobo.com/faefavc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;

&lt;h4 id=&#34;慎重将时间戳直接放入行键中&#34;&gt;慎重将时间戳直接放入行键中&lt;/h4&gt;

&lt;p&gt;对于同一条数据，HBase本身提供时间戳(TimeStamp)以在同一个RowKey下保存不同版本数据;
对于整体，存放旧数据的区域随着时间戳增大可能不再写入，而存放新数据的区域始终保持高负荷，这样降低了HBase整体的读写能力。&lt;/p&gt;

&lt;p&gt;一个推荐的方式是使用反向时间戳。&lt;/p&gt;

&lt;h4 id=&#34;权衡hash和string的效果&#34;&gt;权衡hash和string的效果&lt;/h4&gt;

&lt;p&gt;哈希化(一般特指单项哈希)的Rowkey能很好的避免热点问题，但是也会同时丢失直接使用String的RowKey的天然聚类和排序的能力。&lt;/p&gt;

&lt;h2 id=&#34;列族-columnfamily&#34;&gt;列族(ColumnFamily)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-3&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字的组合形式，其中，单词必须大写，并且首字符必须为英文字符，不能是数字;&lt;/li&gt;
&lt;li&gt;长度尽量限制在1~6字符之间，过长的列族名称将占用更多的存储空间,它们不应该像在典型的 RDBMS 中一样具有自我记录和描述性;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-3&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA
D1 # data1
WA # web args
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;注意-1&#34;&gt;注意&lt;/h3&gt;

&lt;h4 id=&#34;列族的数量应控制在1-3个&#34;&gt;列族的数量应控制在1-3个&lt;/h4&gt;

&lt;p&gt;HBase 表不应该被设计成模拟RDBMS表，列族的数量在满足需求的情况下应该尽可能少。在存储时，一个列族会存储成一个StoreFile，多个列族对应的多个文件在分裂时会对服务器造成更大的压力。&lt;/p&gt;

&lt;h2 id=&#34;列-qualifier&#34;&gt;列(Qualifier)&lt;/h2&gt;

&lt;h3 id=&#34;命名规范-4&#34;&gt;命名规范&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;采用英文单词、阿拉伯数字、连接符（_）的组合形式，其中，单词必须&lt;strong&gt;小写&lt;/strong&gt;，并且首字符必须为英文字符，不能是数字，可用连接符拼接多个单词;&lt;/li&gt;
&lt;li&gt;所有列名都应该是名词或者以&lt;code&gt;is&lt;/code&gt;开头的动宾短语(表示判断)，不应该使用其他词性单词;&lt;/li&gt;
&lt;li&gt;允许使用前缀，不允许使用后缀;&lt;/li&gt;
&lt;li&gt;长度尽量限制在1~16字符之间;&lt;/li&gt;
&lt;li&gt;尽量采用具有明确意义的英文单词，而不建议采用汉字的拼音字母或者拼音首字母组合;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;示例-4&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;user_name
is_str
sound_type
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>手把手教你用Kafka</title>
      <link>https://szthanatos.github.io/topic/kafka_intro/</link>
      <pubDate>Sun, 09 Dec 2018 15:55:32 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/topic/kafka_intro/</guid>
      <description>

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://szthanatos.github.io/post/kafka/install&#34;&gt;Kafka -01- 安装配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://szthanatos.github.io/post/kafka/update&#34;&gt;Kafka -02- 滚动升级&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker从入门到哪都不去</title>
      <link>https://szthanatos.github.io/topic/docker_intro/</link>
      <pubDate>Sun, 09 Dec 2018 15:55:24 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/topic/docker_intro/</guid>
      <description>

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://szthanatos.github.io/post/docker/basis&#34;&gt;Docker -01- 基本概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://szthanatos.github.io/post/docker/ecology&#34;&gt;Docker -02- 进阶生态&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kafka -02- 滚动升级</title>
      <link>https://szthanatos.github.io/post/kafka/update/</link>
      <pubDate>Sun, 09 Dec 2018 15:19:52 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/kafka/update/</guid>
      <description>

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#环境说明&#34;&gt;环境说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#可能存在的风险&#34;&gt;可能存在的风险&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#轻微警报&#34;&gt;轻微警报&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#严重警报&#34;&gt;严重警报&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#升级步骤-滚动升级&#34;&gt;升级步骤（滚动升级）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#替代方案-离线升级&#34;&gt;替代方案（离线升级）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kafka2-0官方升级指南&#34;&gt;Kafka2.0官方升级指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;环境说明&#34;&gt;环境说明&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;版本号&lt;/th&gt;
&lt;th&gt;发布日期&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;当前版本&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.11.0.1&lt;/td&gt;
&lt;td&gt;2017-09-14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;最新版本&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2018-07-30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;配置文件路径：&lt;/strong&gt;
&amp;gt; /home/tools/kafka_2.12-0.11.0.1/config/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目标需求：&lt;/strong&gt; 在Kafka集群不停机不停止服务的情况下进行升级改造。&lt;/p&gt;

&lt;h2 id=&#34;可能存在的风险&#34;&gt;可能存在的风险&lt;/h2&gt;

&lt;h3 id=&#34;轻微警报&#34;&gt;轻微警报&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;consumer可能出现偏移量提交失败而造成重复消费&lt;/li&gt;
&lt;li&gt;broker提示&amp;rsquo;NotLeaderForPartitionException&amp;rsquo;异常&lt;/li&gt;
&lt;li&gt;由于节点下线，可能造成临时性能问题
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;严重警报&#34;&gt;严重警报&lt;/h3&gt;

&lt;p&gt;严格按照步骤升级，暂未捕捉到严重问题相关信息&lt;/p&gt;

&lt;h2 id=&#34;升级步骤-滚动升级&#34;&gt;升级步骤（滚动升级）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;限定通讯协议版本：&lt;/p&gt;

&lt;p&gt;配置broker上的server.properties文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;inter.broker.protocol.version = 0.11.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;依次更新代码并重启borker：&lt;/p&gt;

&lt;p&gt;一次关闭一个broker，更新源码，重启&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更新通讯协议版本：&lt;/p&gt;

&lt;p&gt;完成所有broker节点的源码更新后,升级协议（方法同上）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;inter.broker.protocol.version = 2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再次依次重启broker：&lt;/p&gt;

&lt;p&gt;同上，一次重启一个&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;ps：&lt;/em&gt;&lt;/strong&gt; 如果修改过消息格式版本(log.message.format.version)，则需要在上面步骤中，同步配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;log.message.format.version=当前版本/要升级的版本
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;替代方案-离线升级&#34;&gt;替代方案（离线升级）&lt;/h2&gt;

&lt;p&gt;关闭所有broker，更新代码并重新启动。默认情况下，自动以新协议开始。&lt;/p&gt;

&lt;h2 id=&#34;kafka2-0官方升级指南&#34;&gt;Kafka2.0官方升级指南&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#upgrade&#34; target=&#34;_blank&#34;&gt;upgrade&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka -01- 安装配置</title>
      <link>https://szthanatos.github.io/post/kafka/install/</link>
      <pubDate>Thu, 06 Dec 2018 10:09:46 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/kafka/install/</guid>
      <description>

&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#环境说明&#34;&gt;环境说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装步骤&#34;&gt;安装步骤&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#0-环境准备&#34;&gt;0. 环境准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-下载安装&#34;&gt;1. 下载安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-配置集群参数&#34;&gt;2. 配置集群参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-配置日志参数&#34;&gt;3. 配置日志参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-配置jvm参数&#34;&gt;4. 配置JVM参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-配置linux参数&#34;&gt;5. 配置Linux参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kafka2-0官方安装指南&#34;&gt;Kafka2.0官方安装指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;环境说明&#34;&gt;环境说明&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;当前版本&lt;/th&gt;
&lt;th&gt;发布日期&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;2018-07-30&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi?path=/kafka/2.0.0/kafka_2.11-2.0.0.tgz&#34; target=&#34;_blank&#34;&gt;官方2.0.0镜像&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;安装步骤&#34;&gt;安装步骤&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;注意：&lt;/strong&gt; 文中以 &lt;code&gt;{}&lt;/code&gt; 包裹起来的内容需要自己替换，并非直接使用&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-环境准备&#34;&gt;0. 环境准备&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基础环境&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Java版本应该在8(jdk1.8)或以上，以更好的支持G1回收&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;硬件参数&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CPU: 英特尔至强E5-2650 v4 * 2 (共计24核)&lt;br&gt;Mem: DDR4内存-32GB * 8&lt;br&gt;Sto: 2000GB * 8 raid 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;文件路径&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;/home/tools/kafka_2.11-2.0.0/&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数据存放位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;/home/sdb/kafka-logs,/home/sdc/kafka-logs,&lt;br&gt;/home/sdd/kafka-logs,/home/sde/kafka-logs,&lt;br&gt;/home/sdf/kafka-logs,/home/sdg/kafka-logs,&lt;br&gt;/home/sdh/kafka-logs,/home/sdi/kafka-logs&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;zookeeper集群位置&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10.10.20.83:2181,10.10.20.84:2181,10.10.20.85:2181&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;1-下载安装&#34;&gt;1. 下载安装&lt;/h3&gt;

&lt;p&gt;下载最新版本Kafka，解压到指定目录，无需其他操作即完成安装。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf kafka_2.11-2.0.0.tgz -C /home/tools
cd kafka_2.11-2.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-配置集群参数&#34;&gt;2. 配置集群参数&lt;/h3&gt;

&lt;p&gt;修改&lt;code&gt;config/server.properties&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;基本参数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# broker唯一id，值为不重复正整数
broker.id={n: int}

# 服务监听地址
listeners=PLAINTEXT://{your.host}:9092

# 日志存放位置列表，以逗号隔开
log.dirs={data.storage.list}

# zookeeper地址列表，以逗号隔开
zookeeper.connect={zookeeper.server.list} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;优化参数配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 消息处理线程数，建议数量为cpu核数加1
num.network.threads=25

# 磁盘IO的线程数,建议为cpu核数2倍，最大不超过3倍
num.io.threads=48

# 拉取线程数，影响follower的I/O并发度，单位时间内leader持有更多请求，相应负载会增大
num.replica.fetchers=2

# 分区数量配置，根据业务情况修改
num.partitions=16

# 消息日志备份数，默认是1
default.replication.factor=2

# 刷盘(写入文件到磁盘)间隔消息数，建议设为10000
log.flush.interval.messages=10000

# 刷盘间隔毫秒数，建议1秒(1000)
log.flush.interval.ms=1000

# 日志保留小时数
log.retention.hours=48

# 段文件大小，过小会产生很多小文件降低性能，过大会影响快速回收磁盘空间以及Kafka重启后的载入速度
og.segment.bytes=1073741824

# 最大字节数，默认1M，可以调到5M以上
replica.fetch.max.bytes=5242880

# 可接受数据大小，受限于java int类型的取值范围,超出后会报OOM异常
socket.request.max.bytes=2147483600

# 日志传输时候的压缩格式，可选择lz4, snappy, gzip,不压缩。建议打开压缩，可以提高传输性能
compression.type=snappy

# 是否允许通过管理工具删除topic，默认是false
delete.topic.enable=true

# 是否允许程序自动创建Topic
auto.create.topics.enable=false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-配置日志参数&#34;&gt;3. 配置日志参数&lt;/h3&gt;

&lt;p&gt;修改&lt;code&gt;config/log4j.properties&lt;/code&gt;的jog4j参数，提高Kafka操作日志（和数据日志区分）的日志级别，以降低日志输出相关资源占用。具体可更改配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Kafka2.0默认只有controller是TRACE级别，可以改为INFO，其他INFO级别可以适当提升为WARN

# zookeeper日志级别，
log4j.logger.org.I0Itec.zkclient.ZkClient=INFO
log4j.logger.org.apache.zookeeper=INFO

# 主日志级别
log4j.logger.kafka=INFO
log4j.logger.org.apache.kafka=INFO

# request日志级别，只有当需要调试时才有必要输出
log4j.logger.kafka.request.logger=WARN, requestAppender
log4j.additivity.kafka.request.logger=false

# 需要调试时解除以下三行注释，并将RequestChannel$设为TRACE
# log4j.logger.kafka.network.Processor=TRACE, requestAppender
# log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender
# log4j.additivity.kafka.server.KafkaApis=false
log4j.logger.kafka.network.RequestChannel$=WARN, requestAppender
log4j.additivity.kafka.network.RequestChannel$=false

# controller日志级别，默认为TRACE
log4j.logger.kafka.controller=INFO, controllerAppender
log4j.additivity.kafka.controller=false

# 日志清理的日志级别
log4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender
log4j.additivity.kafka.log.LogCleaner=false

log4j.logger.state.change.logger=TRACE, stateChangeAppender
log4j.additivity.state.change.logger=false

# 登陆认证的日志级别
log4j.logger.kafka.authorizer.logger=INFO, authorizerAppender
log4j.additivity.kafka.authorizer.logger=false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-配置jvm参数&#34;&gt;4. 配置JVM参数&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning&lt;/strong&gt;：谨慎调试&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;bin/kafka-server-start.sh&lt;/code&gt;文件中调整参数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 在base_dir之后配置参数
base_dir=$(dirname $0)

export KAFKA_HEAP_OPTS=&amp;quot;-Xms6g -Xmx6g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;ps：&lt;/strong&gt; 虽然看起来很激进，但是以上配置参照的是LinkIn高峰时期最繁忙的集群:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;60 brokers
50k partitions (replication factor 2)
800k messages/sec in
300 MB/sec inbound, 1 GB/sec+ outbound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;这个配置的集群实现了90%的GC中断时间不超过21毫秒，每秒钟新生代GC次数不超过一次&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;ps2：&lt;/strong&gt; 上述环境的Java版本为JDK 1.8 u5&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-配置linux参数&#34;&gt;5. 配置Linux参数&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning&lt;/strong&gt;：谨慎调试&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 调整系统所有进程一共可以打开的最大文件数：
echo &#39;fs.file-max = 1024000&#39; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以及&lt;code&gt;/etc/security/limits.conf&lt;/code&gt;末尾增加：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 设置当前user以及由它启动的进程的资源限制
{user}      soft    nofile      1024000
{user}      hard    nofile      1024000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增大socket buffer size，以提高吞吐性能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo 212992 &amp;gt;&amp;gt; /proc/sys/net/core/wmem_max
echo 212992 &amp;gt;&amp;gt; /proc/sys/net/core/rmem_max    
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kafka2-0官方安装指南&#34;&gt;Kafka2.0官方安装指南&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#quickstart&#34; target=&#34;_blank&#34;&gt;Quick Start&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker -02- 进阶生态</title>
      <link>https://szthanatos.github.io/post/docker/ecology/</link>
      <pubDate>Thu, 06 Dec 2018 10:06:06 +0800</pubDate>
      
      <guid>https://szthanatos.github.io/post/docker/ecology/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;


</description>
    </item>
    
  </channel>
</rss>
